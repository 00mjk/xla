// Autogenerated file by gen.py. Do not edit directly!
#pragma once

#include <ATen/TypeDefault.h>

namespace torch_xla {

class AtenXlaTypeBase : public at::TypeDefault {
 public:
  AtenXlaTypeBase(at::TensorTypeId type_id, bool is_variable, bool is_undefined);

  caffe2::TypeMeta typeMeta() const override;

  at::Backend backend() const override;

  at::Allocator* allocator() const override;

  c10::Device getDeviceFromPtr(void* data) const override;

  std::unique_ptr<at::Generator> generator() const override;

  at::TypeID ID() const override;

  at::Tensor & _th_set_(at::Tensor & self, at::Storage source) const override;
  at::Tensor & _th_set_(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntList size, at::IntList stride) const override;
  at::Tensor & _th_set_(at::Tensor & self, const at::Tensor & source) const override;
  at::Tensor & _th_set_(at::Tensor & self) const override;
  at::Tensor & _th_fill_(at::Tensor & self, at::Scalar value) const override;
  at::Tensor & _th_fill_(at::Tensor & self, const at::Tensor & value) const override;
  bool _th_is_set_to(const at::Tensor & self, const at::Tensor & tensor) const override;
  at::Tensor & _th_masked_fill_(at::Tensor & self, const at::Tensor & mask, at::Scalar value) const override;
  at::Tensor & s__th_masked_fill_(at::Tensor & self, const at::Tensor & mask, at::Scalar value) const override;
  at::Tensor & _th_masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) const override;
  at::Tensor & s__th_masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) const override;
  at::Tensor & _th_masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) const override;
  at::Tensor & s__th_masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) const override;
  at::Tensor & _th_masked_select_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mask) const override;
  at::Tensor & s__th_masked_select_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mask) const override;
  at::Tensor _th_masked_select(const at::Tensor & self, const at::Tensor & mask) const override;
  at::Tensor s__th_masked_select(const at::Tensor & self, const at::Tensor & mask) const override;
  at::Tensor & _th_nonzero_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_nonzero(const at::Tensor & self) const override;
  at::Tensor _th_clone(const at::Tensor & self) const override;
  at::Tensor _th_view(const at::Tensor & self, at::IntList size) const override;
  at::Tensor & _th_resize_as_(at::Tensor & self, const at::Tensor & the_template) const override;
  at::Tensor & _th_index_select_out(at::Tensor & result, const at::Tensor & self, int64_t dim, const at::Tensor & index) const override;
  at::Tensor _th_index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index) const override;
  at::Tensor & _th_index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) const override;
  at::Tensor & _th_take_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & index) const override;
  at::Tensor _th_take(const at::Tensor & self, const at::Tensor & index) const override;
  at::Tensor & _th_put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate) const override;
  at::Tensor & _th_index_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) const override;
  at::Tensor & _th_index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) const override;
  at::Tensor & _th_index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value) const override;
  at::Tensor & _th_unfold_out(at::Tensor & result, const at::Tensor & self, int64_t dimension, int64_t size, int64_t step) const override;
  at::Tensor _th_unfold(const at::Tensor & self, int64_t dimension, int64_t size, int64_t step) const override;
  at::Tensor & _th_scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) const override;
  at::Tensor & _th_scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) const override;
  at::Tensor & _th_scatter_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) const override;
  at::Tensor & _th_gather_out(at::Tensor & result, const at::Tensor & self, int64_t dim, const at::Tensor & index) const override;
  at::Tensor _th_gather(const at::Tensor & self, int64_t dim, const at::Tensor & index) const override;
  bool _th_equal(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_and_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_and(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_and_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_and_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_and(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_and(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_iand_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_iand_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_iand_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_or_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_or(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_or_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_or_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_or(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_or(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_ior_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_ior_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_ior_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_xor_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_xor(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_xor_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_xor_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_xor(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_xor(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_ixor_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_ixor_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_ixor_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_lshift_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_lshift(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_lshift_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_lshift_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_lshift(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_lshift(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_ilshift_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_ilshift_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_ilshift_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_rshift_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_rshift(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_rshift_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_rshift_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_rshift(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_rshift(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_irshift_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_irshift_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_irshift_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_lt_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_lt(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_lt_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_lt_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_lt(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_lt(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_lt_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_lt_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_lt_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_gt_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_gt(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_gt_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_gt_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_gt(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_gt(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_gt_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_gt_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_gt_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_le_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_le(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_le_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_le_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_le(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_le(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_le_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_le_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_le_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_ge_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_ge(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_ge_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_ge_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_ge(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_ge(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_ge_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_ge_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_ge_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_eq_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_eq(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_eq_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_eq_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_eq(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_eq(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_eq_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_eq_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_eq_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_ne_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_ne(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_ne_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_ne_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_ne(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_ne(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_ne_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_ne_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_ne_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_min_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_min_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_min(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_min(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_min(const at::Tensor & self) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_min_out(at::Tensor & min, at::Tensor & min_indices, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor,at::Tensor> _th_min(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor & _th_max_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_max_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_max(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_max(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_max(const at::Tensor & self) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_max_out(at::Tensor & max, at::Tensor & max_indices, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor,at::Tensor> _th_max(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_kthvalue_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor,at::Tensor> _th_kthvalue(const at::Tensor & self, int64_t k, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_mode_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor,at::Tensor> _th_mode(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor _th_median(const at::Tensor & self) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_median_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor,at::Tensor> _th_median(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_sort_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool descending) const override;
  std::tuple<at::Tensor,at::Tensor> _th_sort(const at::Tensor & self, int64_t dim, bool descending) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_topk_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const override;
  std::tuple<at::Tensor,at::Tensor> _th_topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const override;
  at::Tensor _th_any(const at::Tensor & self) const override;
  at::Tensor & _th_any_out(at::Tensor & result, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor _th_any(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor & _th_abs_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_abs(const at::Tensor & self) const override;
  at::Tensor & _th_sigmoid_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_sigmoid(const at::Tensor & self) const override;
  at::Tensor & _th_log_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_log(const at::Tensor & self) const override;
  at::Tensor & _th_log10_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_log10(const at::Tensor & self) const override;
  at::Tensor & _th_log1p_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_log1p(const at::Tensor & self) const override;
  at::Tensor & _th_log2_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_log2(const at::Tensor & self) const override;
  at::Tensor & _th_lgamma_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_lgamma(const at::Tensor & self) const override;
  at::Tensor & _th_lgamma_(at::Tensor & self) const override;
  at::Tensor & _th_digamma_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_digamma(const at::Tensor & self) const override;
  at::Tensor & _th_digamma_(at::Tensor & self) const override;
  at::Tensor & _th_polygamma_out(at::Tensor & result, int64_t n, const at::Tensor & self) const override;
  at::Tensor _th_polygamma(int64_t n, const at::Tensor & self) const override;
  at::Tensor & _th_polygamma_(at::Tensor & self, int64_t n) const override;
  at::Tensor & _th_exp_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_exp(const at::Tensor & self) const override;
  at::Tensor & _th_expm1_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_expm1(const at::Tensor & self) const override;
  at::Tensor & _th_cos_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_cos(const at::Tensor & self) const override;
  at::Tensor & _th_acos_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_acos(const at::Tensor & self) const override;
  at::Tensor & _th_cosh_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_cosh(const at::Tensor & self) const override;
  at::Tensor & _th_sin_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_sin(const at::Tensor & self) const override;
  at::Tensor & _th_asin_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_asin(const at::Tensor & self) const override;
  at::Tensor & _th_sinh_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_sinh(const at::Tensor & self) const override;
  at::Tensor & _th_tan_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_tan(const at::Tensor & self) const override;
  at::Tensor & _th_atan_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_atan(const at::Tensor & self) const override;
  at::Tensor & _th_tanh_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_tanh(const at::Tensor & self) const override;
  at::Tensor & _th_erf_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_erf(const at::Tensor & self) const override;
  at::Tensor & _th_erfc_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_erfc(const at::Tensor & self) const override;
  at::Tensor & _th_erfinv_(at::Tensor & self) const override;
  at::Tensor & _th_erfinv_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_erfinv(const at::Tensor & self) const override;
  at::Tensor & _th_sqrt_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_sqrt(const at::Tensor & self) const override;
  at::Tensor & _th_rsqrt_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_rsqrt(const at::Tensor & self) const override;
  at::Tensor & _th_ceil_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_ceil(const at::Tensor & self) const override;
  at::Tensor & _th_floor_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_floor(const at::Tensor & self) const override;
  at::Tensor & _th_round_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_round(const at::Tensor & self) const override;
  at::Tensor & _th_trunc_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_trunc(const at::Tensor & self) const override;
  at::Tensor & _th_frac_(at::Tensor & self) const override;
  at::Tensor & _th_frac_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_frac(const at::Tensor & self) const override;
  at::Tensor & _th_var_out(at::Tensor & result, const at::Tensor & self, int64_t dim, bool unbiased, bool keepdim) const override;
  at::Tensor _th_var(const at::Tensor & self, int64_t dim, bool unbiased, bool keepdim) const override;
  at::Tensor _th_var(const at::Tensor & self, bool unbiased) const override;
  at::Tensor & _th_std_out(at::Tensor & result, const at::Tensor & self, int64_t dim, bool unbiased, bool keepdim) const override;
  at::Tensor _th_std(const at::Tensor & self, int64_t dim, bool unbiased, bool keepdim) const override;
  at::Tensor _th_std(const at::Tensor & self, bool unbiased) const override;
  at::Tensor & _th_renorm_out(at::Tensor & result, const at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) const override;
  at::Tensor _th_renorm(const at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) const override;
  at::Tensor & _th_renorm_(at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) const override;
  at::Tensor _th_dist(const at::Tensor & self, const at::Tensor & other, at::Scalar p) const override;
  at::Tensor s__th_dist(const at::Tensor & self, const at::Tensor & other, at::Scalar p) const override;
  at::Tensor & _th_reciprocal_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_reciprocal(const at::Tensor & self) const override;
  at::Tensor & _th_reciprocal_(at::Tensor & self) const override;
  at::Tensor & _th_neg_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_neg(const at::Tensor & self) const override;
  at::Tensor & _th_neg_(at::Tensor & self) const override;
  at::Tensor & _th_atan2_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_atan2_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_atan2(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_atan2(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_atan2_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_atan2_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_pow_out(at::Tensor & result, const at::Tensor & self, at::Scalar exponent) const override;
  at::Tensor _th_pow(const at::Tensor & self, at::Scalar exponent) const override;
  at::Tensor & _th_pow_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & exponent) const override;
  at::Tensor & s__th_pow_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & exponent) const override;
  at::Tensor _th_pow(const at::Tensor & self, const at::Tensor & exponent) const override;
  at::Tensor s__th_pow(const at::Tensor & self, const at::Tensor & exponent) const override;
  at::Tensor & _th_pow_out(at::Tensor & result, at::Scalar self, const at::Tensor & exponent) const override;
  at::Tensor _th_pow(at::Scalar self, const at::Tensor & exponent) const override;
  at::Tensor & _th_pow_(at::Tensor & self, at::Scalar exponent) const override;
  at::Tensor & _th_pow_(at::Tensor & self, const at::Tensor & exponent) const override;
  at::Tensor & s__th_pow_(at::Tensor & self, const at::Tensor & exponent) const override;
  at::Tensor & _th_lerp_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & end, at::Scalar weight) const override;
  at::Tensor & s__th_lerp_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & end, at::Scalar weight) const override;
  at::Tensor _th_lerp(const at::Tensor & self, const at::Tensor & end, at::Scalar weight) const override;
  at::Tensor s__th_lerp(const at::Tensor & self, const at::Tensor & end, at::Scalar weight) const override;
  at::Tensor & _th_lerp_(at::Tensor & self, const at::Tensor & end, at::Scalar weight) const override;
  at::Tensor & s__th_lerp_(at::Tensor & self, const at::Tensor & end, at::Scalar weight) const override;
  at::Tensor & _th_histc_out(at::Tensor & result, const at::Tensor & self, int64_t bins, at::Scalar min, at::Scalar max) const override;
  at::Tensor _th_histc(const at::Tensor & self, int64_t bins, at::Scalar min, at::Scalar max) const override;
  at::Tensor & _th_zero_(at::Tensor & self) const override;
  at::Tensor & _th_cumsum_out(at::Tensor & result, const at::Tensor & self, int64_t dim) const override;
  at::Tensor _th_cumsum(const at::Tensor & self, int64_t dim) const override;
  at::Tensor & _th_cumprod_out(at::Tensor & result, const at::Tensor & self, int64_t dim) const override;
  at::Tensor _th_cumprod(const at::Tensor & self, int64_t dim) const override;
  at::Tensor & _th_sign_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _th_sign(const at::Tensor & self) const override;
  at::Tensor & _th_sign_(at::Tensor & self) const override;
  at::Tensor _th_trace(const at::Tensor & self) const override;
  at::Tensor & _th_fmod_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_fmod(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_fmod_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_fmod_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_fmod(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_fmod(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_fmod_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_fmod_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_fmod_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_remainder_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor _th_remainder(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_remainder_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_remainder_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _th_remainder(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor s__th_remainder(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_remainder_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _th_remainder_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & s__th_remainder_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _th_clamp_out(at::Tensor & result, const at::Tensor & self, at::Scalar min, at::Scalar max) const override;
  at::Tensor _th_clamp(const at::Tensor & self, at::Scalar min, at::Scalar max) const override;
  at::Tensor & _th_clamp_min_out(at::Tensor & result, const at::Tensor & self, at::Scalar min) const override;
  at::Tensor _th_clamp_min(const at::Tensor & self, at::Scalar min) const override;
  at::Tensor & _th_clamp_max_out(at::Tensor & result, const at::Tensor & self, at::Scalar max) const override;
  at::Tensor _th_clamp_max(const at::Tensor & self, at::Scalar max) const override;
  at::Tensor _th_dot(const at::Tensor & self, const at::Tensor & tensor) const override;
  at::Tensor & _th_cross_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other, int64_t dim) const override;
  at::Tensor _th_cross(const at::Tensor & self, const at::Tensor & other, int64_t dim) const override;
  at::Tensor & _th_diag_out(at::Tensor & result, const at::Tensor & self, int64_t diagonal) const override;
  at::Tensor _th_diag(const at::Tensor & self, int64_t diagonal) const override;
  at::Tensor & _th_addmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & s__th_addmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor _th_addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor s__th_addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & _th_addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & _th_addmv_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & s__th_addmv_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor _th_addmv(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor s__th_addmv(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & _th_addmv_(at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & _th_addr_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & s__th_addr_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor _th_addr(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor s__th_addr(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & _th_addr_(at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & _th_ger_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & vec2) const override;
  at::Tensor _th_ger(const at::Tensor & self, const at::Tensor & vec2) const override;
  at::Tensor & _th_mv_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & vec) const override;
  at::Tensor _th_mv(const at::Tensor & self, const at::Tensor & vec) const override;
  at::Tensor & _th_mm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat2) const override;
  at::Tensor _th_mm(const at::Tensor & self, const at::Tensor & mat2) const override;
  at::Tensor & _th_bmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat2) const override;
  at::Tensor _th_bmm(const at::Tensor & self, const at::Tensor & mat2) const override;
  at::Tensor & _th_addbmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & s__th_addbmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor _th_addbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor s__th_addbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & _th_addbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & _th_baddbmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & s__th_baddbmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor _th_baddbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor s__th_baddbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & _th_addcmul_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor & s__th_addcmul_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor _th_addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor s__th_addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor & _th_addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor & s__th_addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor & _th_addcdiv_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor & s__th_addcdiv_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor _th_addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor s__th_addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor & _th_addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor & s__th_addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_gels_out(at::Tensor & res1, at::Tensor & res2, const at::Tensor & self, const at::Tensor & A) const override;
  std::tuple<at::Tensor,at::Tensor> _th_gels(const at::Tensor & self, const at::Tensor & A) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_trtrs_out(at::Tensor & res1, at::Tensor & res2, const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) const override;
  std::tuple<at::Tensor,at::Tensor> _th_trtrs(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_symeig_out(at::Tensor & res1, at::Tensor & res2, const at::Tensor & self, bool eigenvectors, bool upper) const override;
  std::tuple<at::Tensor,at::Tensor> _th_symeig(const at::Tensor & self, bool eigenvectors, bool upper) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_eig_out(at::Tensor & res1, at::Tensor & res2, const at::Tensor & self, bool eigenvectors) const override;
  std::tuple<at::Tensor,at::Tensor> _th_eig(const at::Tensor & self, bool eigenvectors) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _th_svd_out(at::Tensor & res1, at::Tensor & res2, at::Tensor & res3, const at::Tensor & self, bool some, bool compute_uv) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _th_svd(const at::Tensor & self, bool some, bool compute_uv) const override;
  at::Tensor & _th_getri_single_out(at::Tensor & output, const at::Tensor & self) const override;
  at::Tensor _th_getri_single(const at::Tensor & self) const override;
  at::Tensor & _th_potri_out(at::Tensor & output, const at::Tensor & self, bool upper) const override;
  at::Tensor _th_potri(const at::Tensor & self, bool upper) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_pstrf_out(at::Tensor & res1, at::Tensor & res2, const at::Tensor & self, bool upper, at::Scalar tol) const override;
  std::tuple<at::Tensor,at::Tensor> _th_pstrf(const at::Tensor & self, bool upper, at::Scalar tol) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_qr_out(at::Tensor & res1, at::Tensor & res2, const at::Tensor & self) const override;
  std::tuple<at::Tensor,at::Tensor> _th_qr(const at::Tensor & self) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_geqrf_out(at::Tensor & res1, at::Tensor & res2, const at::Tensor & self) const override;
  std::tuple<at::Tensor,at::Tensor> _th_geqrf(const at::Tensor & self) const override;
  at::Tensor & _th_orgqr_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & input2) const override;
  at::Tensor _th_orgqr(const at::Tensor & self, const at::Tensor & input2) const override;
  at::Tensor & _th_ormqr_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) const override;
  at::Tensor _th_ormqr(const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) const override;
  std::tuple<at::Tensor &,at::Tensor &> _th_btrifact_out(at::Tensor & result, at::Tensor & pivots, const at::Tensor & self, bool pivot) const override;
  std::tuple<at::Tensor,at::Tensor> _th_btrifact(const at::Tensor & self, bool pivot) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _th_btrifact_with_info_out(at::Tensor & result, at::Tensor & pivots, at::Tensor & info, const at::Tensor & self, bool pivot) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _th_btrifact_with_info(const at::Tensor & self, bool pivot) const override;
  at::Tensor & _th_btrisolve_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) const override;
  at::Tensor _th_btrisolve(const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) const override;
  at::Tensor & _th_random_(at::Tensor & self, int64_t from, int64_t to, at::Generator * generator) const override;
  at::Tensor & _th_random_(at::Tensor & self, int64_t to, at::Generator * generator) const override;
  at::Tensor & _th_random_(at::Tensor & self, at::Generator * generator) const override;
  at::Tensor & _th_multinomial_out(at::Tensor & result, const at::Tensor & self, int64_t num_samples, bool replacement, at::Generator * generator) const override;
  at::Tensor _th_multinomial(const at::Tensor & self, int64_t num_samples, bool replacement, at::Generator * generator) const override;
  at::Tensor & _th_uniform_(at::Tensor & self, double from, double to, at::Generator * generator) const override;
  at::Tensor & _th_normal_out(at::Tensor & output, const at::Tensor & mean, double std, at::Generator * generator) const override;
  at::Tensor _th_normal(const at::Tensor & mean, double std, at::Generator * generator) const override;
  at::Tensor & _th_normal_out(at::Tensor & output, double mean, const at::Tensor & std, at::Generator * generator) const override;
  at::Tensor _th_normal(double mean, const at::Tensor & std, at::Generator * generator) const override;
  at::Tensor & _th_normal_out(at::Tensor & output, const at::Tensor & mean, const at::Tensor & std, at::Generator * generator) const override;
  at::Tensor _th_normal(const at::Tensor & mean, const at::Tensor & std, at::Generator * generator) const override;
  at::Tensor & _th_normal_(at::Tensor & self, double mean, double std, at::Generator * generator) const override;
  at::Tensor & _th_cauchy_(at::Tensor & self, double median, double sigma, at::Generator * generator) const override;
  at::Tensor & _th_log_normal_(at::Tensor & self, double mean, double std, at::Generator * generator) const override;
  at::Tensor & _th_exponential_(at::Tensor & self, double lambd, at::Generator * generator) const override;
  at::Tensor & _th_geometric_(at::Tensor & self, double p, at::Generator * generator) const override;
  at::Tensor & _th_dirichlet_grad_out(at::Tensor & output, const at::Tensor & x, const at::Tensor & alpha, const at::Tensor & total) const override;
  at::Tensor _th_dirichlet_grad(const at::Tensor & x, const at::Tensor & alpha, const at::Tensor & total) const override;
  at::Tensor _th_alias(const at::Tensor & self) const override;
  at::Tensor & _th_copy_ignoring_overlaps_(at::Tensor & self, const at::Tensor & src) const override;
  at::Tensor & _th_cat_out(at::Tensor & self, at::TensorList tensors, int64_t dim) const override;
  at::Tensor _th_cat(at::TensorList tensors, int64_t dim) const override;
  at::Tensor & _thnn_binary_cross_entropy_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor _thnn_binary_cross_entropy_forward(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor & _thnn_binary_cross_entropy_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor _thnn_binary_cross_entropy_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor & _thnn_l1_loss_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor _thnn_l1_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & _thnn_l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor _thnn_l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & _thnn_mse_loss_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor _thnn_mse_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & _thnn_mse_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor _thnn_mse_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & _thnn_multi_margin_loss_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor _thnn_multi_margin_loss_forward(const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor & _thnn_multi_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor _thnn_multi_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) const override;
  std::tuple<at::Tensor &,at::Tensor &> _thnn_multilabel_margin_loss_forward_out(at::Tensor & output, at::Tensor & is_target, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  std::tuple<at::Tensor,at::Tensor> _thnn_multilabel_margin_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & _thnn_multilabel_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) const override;
  at::Tensor _thnn_multilabel_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) const override;
  std::tuple<at::Tensor &,at::Tensor &> _thnn_nll_loss_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  std::tuple<at::Tensor,at::Tensor> _thnn_nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  at::Tensor & _thnn_nll_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) const override;
  at::Tensor _thnn_nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) const override;
  std::tuple<at::Tensor &,at::Tensor &> _thnn_nll_loss2d_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  std::tuple<at::Tensor,at::Tensor> _thnn_nll_loss2d_forward(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  at::Tensor & _thnn_nll_loss2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) const override;
  at::Tensor _thnn_nll_loss2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) const override;
  at::Tensor & _thnn_smooth_l1_loss_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor _thnn_smooth_l1_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & _thnn_smooth_l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor _thnn_smooth_l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & _thnn_soft_margin_loss_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor _thnn_soft_margin_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & _thnn_soft_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor _thnn_soft_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & _thnn_elu_forward_out(at::Tensor & output, const at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) const override;
  at::Tensor _thnn_elu_forward(const at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) const override;
  at::Tensor & _thnn_elu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale, const at::Tensor & output) const override;
  at::Tensor _thnn_elu_backward(const at::Tensor & grad_output, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale, const at::Tensor & output) const override;
  at::Tensor & _thnn_elu_(at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) const override;
  at::Tensor & _thnn_elu_forward_(at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) const override;
  at::Tensor & _thnn_glu_forward_out(at::Tensor & output, const at::Tensor & self, int64_t dim) const override;
  at::Tensor _thnn_glu_forward(const at::Tensor & self, int64_t dim) const override;
  at::Tensor & _thnn_glu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) const override;
  at::Tensor _thnn_glu_backward(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) const override;
  at::Tensor & _thnn_hardtanh_forward_out(at::Tensor & output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor _thnn_hardtanh_forward(const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor & _thnn_hardtanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor _thnn_hardtanh_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor & _thnn_hardtanh_(at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor & _thnn_hardtanh_forward_(at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor & _thnn_leaky_relu_forward_out(at::Tensor & output, const at::Tensor & self, at::Scalar negative_slope) const override;
  at::Tensor _thnn_leaky_relu_forward(const at::Tensor & self, at::Scalar negative_slope) const override;
  at::Tensor & _thnn_leaky_relu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar negative_slope) const override;
  at::Tensor _thnn_leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar negative_slope) const override;
  at::Tensor & _thnn_leaky_relu_(at::Tensor & self, at::Scalar negative_slope) const override;
  at::Tensor & _thnn_leaky_relu_forward_(at::Tensor & self, at::Scalar negative_slope) const override;
  std::tuple<at::Tensor &,at::Tensor &> _thnn_log_sigmoid_forward_out(at::Tensor & output, at::Tensor & buffer, const at::Tensor & self) const override;
  std::tuple<at::Tensor,at::Tensor> _thnn_log_sigmoid_forward(const at::Tensor & self) const override;
  at::Tensor & _thnn_log_sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) const override;
  at::Tensor _thnn_log_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) const override;
  at::Tensor & _thnn_rrelu_with_noise_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) const override;
  at::Tensor _thnn_rrelu_with_noise_forward(const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) const override;
  at::Tensor & _thnn_rrelu_with_noise_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training) const override;
  at::Tensor _thnn_rrelu_with_noise_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training) const override;
  at::Tensor & _thnn_rrelu_with_noise_(at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) const override;
  at::Tensor & _thnn_rrelu_with_noise_forward_(at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) const override;
  at::Tensor & _thnn_softplus_forward_out(at::Tensor & output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold) const override;
  at::Tensor _thnn_softplus_forward(const at::Tensor & self, at::Scalar beta, at::Scalar threshold) const override;
  at::Tensor & _thnn_softplus_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold, const at::Tensor & output) const override;
  at::Tensor _thnn_softplus_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold, const at::Tensor & output) const override;
  at::Tensor & _thnn_softshrink_forward_out(at::Tensor & output, const at::Tensor & self, at::Scalar lambd) const override;
  at::Tensor _thnn_softshrink_forward(const at::Tensor & self, at::Scalar lambd) const override;
  at::Tensor & _thnn_softshrink_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar lambd) const override;
  at::Tensor _thnn_softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar lambd) const override;
  at::Tensor & _thnn_adaptive_avg_pool3d_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor _thnn_adaptive_avg_pool3d_forward(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & _thnn_adaptive_avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self) const override;
  at::Tensor _thnn_adaptive_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self) const override;
  std::tuple<at::Tensor &,at::Tensor &> _thnn_adaptive_max_pool2d_forward_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntList output_size) const override;
  std::tuple<at::Tensor,at::Tensor> _thnn_adaptive_max_pool2d_forward(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & _thnn_adaptive_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) const override;
  at::Tensor _thnn_adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) const override;
  std::tuple<at::Tensor &,at::Tensor &> _thnn_adaptive_max_pool3d_forward_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntList output_size) const override;
  std::tuple<at::Tensor,at::Tensor> _thnn_adaptive_max_pool3d_forward(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & _thnn_adaptive_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) const override;
  at::Tensor _thnn_adaptive_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) const override;
  at::Tensor & _thnn_avg_pool2d_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor _thnn_avg_pool2d_forward(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor & _thnn_avg_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor _thnn_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor & _thnn_avg_pool3d_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor _thnn_avg_pool3d_forward(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor & _thnn_avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor _thnn_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  std::tuple<at::Tensor &,at::Tensor &> _thnn_max_pool2d_with_indices_forward_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  std::tuple<at::Tensor,at::Tensor> _thnn_max_pool2d_with_indices_forward(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  at::Tensor & _thnn_max_pool2d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode, const at::Tensor & indices) const override;
  at::Tensor _thnn_max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode, const at::Tensor & indices) const override;
  std::tuple<at::Tensor &,at::Tensor &> _thnn_max_pool3d_with_indices_forward_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  std::tuple<at::Tensor,at::Tensor> _thnn_max_pool3d_with_indices_forward(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  at::Tensor & _thnn_max_pool3d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode, const at::Tensor & indices) const override;
  at::Tensor _thnn_max_pool3d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode, const at::Tensor & indices) const override;
  at::Tensor & _thnn_max_unpool2d_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size) const override;
  at::Tensor _thnn_max_unpool2d_forward(const at::Tensor & self, const at::Tensor & indices, at::IntList output_size) const override;
  at::Tensor & _thnn_max_unpool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size) const override;
  at::Tensor _thnn_max_unpool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size) const override;
  at::Tensor & _thnn_max_unpool3d_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size, at::IntList stride, at::IntList padding) const override;
  at::Tensor _thnn_max_unpool3d_forward(const at::Tensor & self, const at::Tensor & indices, at::IntList output_size, at::IntList stride, at::IntList padding) const override;
  at::Tensor & _thnn_max_unpool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size, at::IntList stride, at::IntList padding) const override;
  at::Tensor _thnn_max_unpool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size, at::IntList stride, at::IntList padding) const override;
  at::Tensor & _thnn_upsample_linear1d_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor _thnn_upsample_linear1d_forward(const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor & _thnn_upsample_linear1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor _thnn_upsample_linear1d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor & _thnn_upsample_bilinear2d_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor _thnn_upsample_bilinear2d_forward(const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor & _thnn_upsample_bilinear2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor _thnn_upsample_bilinear2d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor & _thnn_upsample_bicubic2d_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor _thnn_upsample_bicubic2d_forward(const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor & _thnn_upsample_bicubic2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor _thnn_upsample_bicubic2d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor & _thnn_upsample_trilinear3d_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor _thnn_upsample_trilinear3d_forward(const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor & _thnn_upsample_trilinear3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor _thnn_upsample_trilinear3d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor & _thnn_upsample_nearest1d_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor _thnn_upsample_nearest1d_forward(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & _thnn_upsample_nearest1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor _thnn_upsample_nearest1d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor & _thnn_upsample_nearest2d_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor _thnn_upsample_nearest2d_forward(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & _thnn_upsample_nearest2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor _thnn_upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor & _thnn_upsample_nearest3d_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor _thnn_upsample_nearest3d_forward(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & _thnn_upsample_nearest3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor _thnn_upsample_nearest3d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor & _thnn_sigmoid_forward_out(at::Tensor & output, const at::Tensor & self) const override;
  at::Tensor _thnn_sigmoid_forward(const at::Tensor & self) const override;
  at::Tensor & _thnn_sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) const override;
  at::Tensor _thnn_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output) const override;
  at::Tensor & _thnn_tanh_forward_out(at::Tensor & output, const at::Tensor & self) const override;
  at::Tensor _thnn_tanh_forward(const at::Tensor & self) const override;
  at::Tensor & _thnn_tanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) const override;
  at::Tensor _thnn_tanh_backward(const at::Tensor & grad_output, const at::Tensor & output) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv_transpose2d_forward_out(at::Tensor & output, at::Tensor & columns, at::Tensor & ones, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv_transpose2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv_transpose2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv_transpose2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones, std::array<bool,3> output_mask) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv_transpose3d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv_transpose3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv_transpose3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation, const at::Tensor & finput, const at::Tensor & fgrad_input) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv_transpose3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv2d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, const at::Tensor & finput, const at::Tensor & fgrad_input) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) const override;
  at::Tensor & _thnn_conv_depthwise2d_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  at::Tensor _thnn_conv_depthwise2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &> _thnn_conv_depthwise2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor,at::Tensor> _thnn_conv_depthwise2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, std::array<bool,2> output_mask) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv3d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, const at::Tensor & finput, const at::Tensor & fgrad_input) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv_dilated2d_forward_out(at::Tensor & output, at::Tensor & columns, at::Tensor & ones, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv_dilated2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv_dilated2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv_dilated2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones, std::array<bool,3> output_mask) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv_dilated3d_forward_out(at::Tensor & output, at::Tensor & columns, at::Tensor & ones, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv_dilated3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> _thnn_conv_dilated3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_conv_dilated3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones, std::array<bool,3> output_mask) const override;
  at::Tensor & _thnn_col2im_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor _thnn_col2im_forward(const at::Tensor & self, at::IntList output_size, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor & _thnn_col2im_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor _thnn_col2im_backward(const at::Tensor & grad_output, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor & _thnn_im2col_forward_out(at::Tensor & output, const at::Tensor & self, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor _thnn_im2col_forward(const at::Tensor & self, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor & _thnn_im2col_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList input_size, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor _thnn_im2col_backward(const at::Tensor & grad_output, at::IntList input_size, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor _cast_Byte(const at::Tensor & self, bool non_blocking) const override;
  at::Tensor _cast_Char(const at::Tensor & self, bool non_blocking) const override;
  at::Tensor _cast_Double(const at::Tensor & self, bool non_blocking) const override;
  at::Tensor _cast_Float(const at::Tensor & self, bool non_blocking) const override;
  at::Tensor _cast_Int(const at::Tensor & self, bool non_blocking) const override;
  at::Tensor _cast_Long(const at::Tensor & self, bool non_blocking) const override;
  at::Tensor _cast_Short(const at::Tensor & self, bool non_blocking) const override;
  at::Tensor _cast_Half(const at::Tensor & self, bool non_blocking) const override;
  std::tuple<at::Tensor,at::Tensor> _fused_dropout(const at::Tensor & self, double p, at::Generator * generator) const override;
  at::Tensor _masked_scale(const at::Tensor & self, const at::Tensor & mask, double scale) const override;
  at::Tensor _reshape_from_tensor(const at::Tensor & self, const at::Tensor & shape) const override;
  at::Tensor _shape_as_tensor(const at::Tensor & self) const override;
  at::Tensor dropout(const at::Tensor & input, double p, bool train) const override;
  at::Tensor & dropout_(at::Tensor & self, double p, bool train) const override;
  at::Tensor feature_dropout(const at::Tensor & input, double p, bool train) const override;
  at::Tensor & feature_dropout_(at::Tensor & self, double p, bool train) const override;
  at::Tensor alpha_dropout(const at::Tensor & input, double p, bool train) const override;
  at::Tensor & alpha_dropout_(at::Tensor & self, double p, bool train) const override;
  at::Tensor feature_alpha_dropout(const at::Tensor & input, double p, bool train) const override;
  at::Tensor & feature_alpha_dropout_(at::Tensor & self, double p, bool train) const override;
  at::Tensor abs(const at::Tensor & self) const override;
  at::Tensor & abs_(at::Tensor & self) const override;
  at::Tensor & abs_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor acos(const at::Tensor & self) const override;
  at::Tensor & acos_(at::Tensor & self) const override;
  at::Tensor & acos_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor avg_pool1d(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor adaptive_avg_pool1d(const at::Tensor & self, at::IntList output_size) const override;
  std::tuple<at::Tensor,at::Tensor> adaptive_max_pool1d(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor add(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) const override;
  at::Tensor & add_(at::Tensor & self, const at::Tensor & other, at::Scalar alpha) const override;
  at::Tensor & add_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) const override;
  at::Tensor add(const at::Tensor & self, at::Scalar other, at::Scalar alpha) const override;
  at::Tensor & add_(at::Tensor & self, at::Scalar other, at::Scalar alpha) const override;
  at::Tensor addmv(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & addmv_(at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & addmv_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor addr(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & addr_(at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & addr_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor affine_grid_generator(const at::Tensor & theta, at::IntList size) const override;
  at::Tensor affine_grid_generator_backward(const at::Tensor & grad, at::IntList size) const override;
  at::Tensor all(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor & all_out(at::Tensor & result, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  bool allclose(const at::Tensor & self, const at::Tensor & other, double rtol, double atol, bool equal_nan) const override;
  at::Tensor any(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor & any_out(at::Tensor & result, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor & arange_out(at::Tensor & result, at::Scalar end) const override;
  at::Tensor & arange_out(at::Tensor & result, at::Scalar start, at::Scalar end, at::Scalar step) const override;
  at::Tensor _dim_arange(const at::Tensor & like, int64_t dim) const override;
  at::Tensor argmax(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor argmax(const at::Tensor & self) const override;
  at::Tensor _argmax(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor argmin(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor argmin(const at::Tensor & self) const override;
  at::Tensor _argmin(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor as_strided(const at::Tensor & self, at::IntList size, at::IntList stride, c10::optional<int64_t> storage_offset) const override;
  at::Tensor & as_strided_(at::Tensor & self, at::IntList size, at::IntList stride, c10::optional<int64_t> storage_offset) const override;
  at::Tensor asin(const at::Tensor & self) const override;
  at::Tensor & asin_(at::Tensor & self) const override;
  at::Tensor & asin_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor atan(const at::Tensor & self) const override;
  at::Tensor & atan_(at::Tensor & self) const override;
  at::Tensor & atan_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor baddbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & baddbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & _baddbmm_mkl_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & baddbmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor batch_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) const override;
  at::Tensor bernoulli(const at::Tensor & self, at::Generator * generator) const override;
  at::Tensor & bernoulli_out(at::Tensor & result, const at::Tensor & self, at::Generator * generator) const override;
  at::Tensor & bernoulli_(at::Tensor & self, const at::Tensor & p, at::Generator * generator) const override;
  at::Tensor & bernoulli_(at::Tensor & self, double p, at::Generator * generator) const override;
  at::Tensor bernoulli(const at::Tensor & self, double p, at::Generator * generator) const override;
  at::Tensor bilinear(const at::Tensor & input1, const at::Tensor & input2, const at::Tensor & weight, const at::Tensor & bias) const override;
  at::Tensor binary_cross_entropy_with_logits(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, const at::Tensor & pos_weight, int64_t reduction) const override;
  at::Tensor binary_cross_entropy_with_logits_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, const at::Tensor & pos_weight, int64_t reduction) const override;
  at::Tensor bincount(const at::Tensor & self, const at::Tensor & weights, int64_t minlength) const override;
  at::Tensor bmm(const at::Tensor & self, const at::Tensor & mat2) const override;
  at::Tensor & bmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat2) const override;
  std::vector<at::Tensor> broadcast_tensors(at::TensorList tensors) const override;
  at::Tensor cat(at::TensorList tensors, int64_t dim) const override;
  at::Tensor & cat_out(at::Tensor & result, at::TensorList tensors, int64_t dim) const override;
  at::Tensor ceil(const at::Tensor & self) const override;
  at::Tensor & ceil_(at::Tensor & self) const override;
  at::Tensor & ceil_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor chain_matmul(at::TensorList matrices) const override;
  std::vector<at::Tensor> chunk(const at::Tensor & self, int64_t chunks, int64_t dim) const override;
  at::Tensor clamp(const at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max) const override;
  at::Tensor & clamp_(at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max) const override;
  at::Tensor & clamp_out(at::Tensor & result, const at::Tensor & self, c10::optional<at::Scalar> min, c10::optional<at::Scalar> max) const override;
  at::Tensor clamp_max(const at::Tensor & self, at::Scalar max) const override;
  at::Tensor & clamp_max_(at::Tensor & self, at::Scalar max) const override;
  at::Tensor & clamp_max_out(at::Tensor & result, const at::Tensor & self, at::Scalar max) const override;
  at::Tensor clamp_min(const at::Tensor & self, at::Scalar min) const override;
  at::Tensor & clamp_min_(at::Tensor & self, at::Scalar min) const override;
  at::Tensor & clamp_min_out(at::Tensor & result, const at::Tensor & self, at::Scalar min) const override;
  at::Tensor constant_pad_nd(const at::Tensor & self, at::IntList pad, at::Scalar value) const override;
  at::Tensor contiguous(const at::Tensor & self) const override;
  at::Tensor convolution(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation, bool transposed, at::IntList output_padding, int64_t groups) const override;
  at::Tensor _convolution(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation, bool transposed, at::IntList output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) const override;
  at::Tensor _convolution_nogroup(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation, bool transposed, at::IntList output_padding) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _convolution_double_backward(const at::Tensor & ggI, const at::Tensor & ggW, const at::Tensor & ggb, const at::Tensor & gO, const at::Tensor & weight, const at::Tensor & self, at::IntList stride, at::IntList padding, at::IntList dilation, bool transposed, at::IntList output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) const override;
  at::Tensor conv1d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation, int64_t groups) const override;
  at::Tensor conv2d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation, int64_t groups) const override;
  at::Tensor conv3d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation, int64_t groups) const override;
  at::Tensor conv_tbc(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, int64_t pad) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> conv_tbc_backward(const at::Tensor & self, const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, int64_t pad) const override;
  at::Tensor conv_transpose1d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, int64_t groups, at::IntList dilation) const override;
  at::Tensor conv_transpose2d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, int64_t groups, at::IntList dilation) const override;
  at::Tensor conv_transpose3d(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, int64_t groups, at::IntList dilation) const override;
  at::Tensor & s_copy_(at::Tensor & self, const at::Tensor & src, bool non_blocking) const override;
  at::Tensor _s_copy_from(const at::Tensor & self, const at::Tensor & dst, bool non_blocking) const override;
  void _copy_same_type_(at::Tensor & self, const at::Tensor & src) const override;
  at::Tensor cos(const at::Tensor & self) const override;
  at::Tensor & cos_(at::Tensor & self) const override;
  at::Tensor & cos_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor cosh(const at::Tensor & self) const override;
  at::Tensor & cosh_(at::Tensor & self) const override;
  at::Tensor & cosh_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor cosine_embedding_loss(const at::Tensor & input1, const at::Tensor & input2, const at::Tensor & target, double margin, int64_t reduction) const override;
  at::Tensor cumsum(const at::Tensor & self, int64_t dim, at::ScalarType dtype) const override;
  at::Tensor cumsum(const at::Tensor & self, int64_t dim) const override;
  at::Tensor & cumsum_out(at::Tensor & result, const at::Tensor & self, int64_t dim, at::ScalarType dtype) const override;
  at::Tensor & cumsum_out(at::Tensor & result, const at::Tensor & self, int64_t dim) const override;
  at::Tensor cumprod(const at::Tensor & self, int64_t dim, at::ScalarType dtype) const override;
  at::Tensor cumprod(const at::Tensor & self, int64_t dim) const override;
  at::Tensor & cumprod_out(at::Tensor & result, const at::Tensor & self, int64_t dim, at::ScalarType dtype) const override;
  at::Tensor & cumprod_out(at::Tensor & result, const at::Tensor & self, int64_t dim) const override;
  at::Tensor ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntList input_lengths, at::IntList target_lengths, int64_t blank, int64_t reduction) const override;
  at::Tensor ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, const at::Tensor & input_lengths, const at::Tensor & target_lengths, int64_t blank, int64_t reduction) const override;
  std::tuple<at::Tensor,at::Tensor> _ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntList input_lengths, at::IntList target_lengths, int64_t blank) const override;
  at::Tensor _ctc_loss_backward(const at::Tensor & grad, const at::Tensor & log_probs, const at::Tensor & targets, at::IntList input_lengths, at::IntList target_lengths, const at::Tensor & neg_log_likelihood, const at::Tensor & log_alpha, int64_t blank) const override;
  at::Tensor det(const at::Tensor & self) const override;
  at::Tensor diag_embed(const at::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) const override;
  at::Tensor diagflat(const at::Tensor & self, int64_t offset) const override;
  at::Tensor diagonal(const at::Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) const override;
  at::Tensor div(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & div_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & div_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor div(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & div_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor dot(const at::Tensor & self, const at::Tensor & tensor) const override;
  at::Tensor & dot_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & tensor) const override;
  at::Tensor einsum(std::string equation, at::TensorList tensors) const override;
  at::Tensor embedding(const at::Tensor & weight, const at::Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) const override;
  at::Tensor embedding_backward(const at::Tensor & grad, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) const override;
  at::Tensor embedding_dense_backward(const at::Tensor & grad, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) const override;
  at::Tensor & embedding_renorm_(at::Tensor & self, const at::Tensor & indices, double max_norm, double norm_type) const override;
  at::Tensor embedding_sparse_backward(const at::Tensor & grad, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> embedding_bag(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> _embedding_bag(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse) const override;
  at::Tensor _embedding_bag_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, const at::Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse) const override;
  at::Tensor _embedding_bag_sparse_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode) const override;
  at::Tensor _embedding_bag_dense_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, const at::Tensor & bag_size, const at::Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode) const override;
  at::Tensor empty(at::IntList size, const at::TensorOptions & options) const override;
  at::Tensor & resize_(at::Tensor & self, at::IntList size) const override;
  at::Tensor & empty_out(at::Tensor & result, at::IntList size) const override;
  at::Tensor empty_like(const at::Tensor & self) const override;
  at::Tensor empty_strided(at::IntList size, at::IntList stride, const at::TensorOptions & options) const override;
  at::Tensor erf(const at::Tensor & self) const override;
  at::Tensor & erf_(at::Tensor & self) const override;
  at::Tensor & erf_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor erfc(const at::Tensor & self) const override;
  at::Tensor & erfc_(at::Tensor & self) const override;
  at::Tensor & erfc_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor exp(const at::Tensor & self) const override;
  at::Tensor & exp_(at::Tensor & self) const override;
  at::Tensor & exp_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor expm1(const at::Tensor & self) const override;
  at::Tensor & expm1_(at::Tensor & self) const override;
  at::Tensor & expm1_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor expand(const at::Tensor & self, at::IntList size, bool implicit) const override;
  at::Tensor expand_as(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & eye_out(at::Tensor & result, int64_t n) const override;
  at::Tensor & eye_out(at::Tensor & result, int64_t n, int64_t m) const override;
  at::Tensor flatten(const at::Tensor & self, int64_t start_dim, int64_t end_dim) const override;
  at::Tensor & fill_(at::Tensor & self, at::Scalar value) const override;
  at::Tensor & fill_(at::Tensor & self, const at::Tensor & value) const override;
  at::Tensor floor(const at::Tensor & self) const override;
  at::Tensor & floor_(at::Tensor & self) const override;
  at::Tensor & floor_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor & full_out(at::Tensor & result, at::IntList size, at::Scalar fill_value) const override;
  at::Tensor full_like(const at::Tensor & self, at::Scalar fill_value) const override;
  at::Tensor grid_sampler(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const override;
  at::Tensor grid_sampler_2d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const override;
  std::tuple<at::Tensor,at::Tensor> grid_sampler_2d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const override;
  at::Tensor grid_sampler_3d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const override;
  std::tuple<at::Tensor,at::Tensor> grid_sampler_3d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode) const override;
  at::Tensor hinge_embedding_loss(const at::Tensor & self, const at::Tensor & target, double margin, int64_t reduction) const override;
  at::Tensor ger(const at::Tensor & self, const at::Tensor & vec2) const override;
  at::Tensor & ger_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & vec2) const override;
  std::tuple<at::Tensor,at::Tensor> gesv(const at::Tensor & self, const at::Tensor & A) const override;
  std::tuple<at::Tensor &,at::Tensor &> gesv_out(at::Tensor & solution, at::Tensor & lu, const at::Tensor & self, const at::Tensor & A) const override;
  std::tuple<at::Tensor,at::Tensor> _gesv_helper(const at::Tensor & self, const at::Tensor & A) const override;
  at::Tensor group_norm(const at::Tensor & input, int64_t num_groups, const at::Tensor & weight, const at::Tensor & bias, double eps, bool cudnn_enabled) const override;
  at::Tensor fft(const at::Tensor & self, int64_t signal_ndim, bool normalized) const override;
  at::Tensor ifft(const at::Tensor & self, int64_t signal_ndim, bool normalized) const override;
  at::Tensor rfft(const at::Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) const override;
  at::Tensor irfft(const at::Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, at::IntList signal_sizes) const override;
  at::Tensor _fft_with_size(const at::Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, at::IntList checked_signal_sizes, bool normalized, bool onesided, at::IntList output_sizes) const override;
  void _cufft_set_plan_cache_max_size(int64_t max_size) const override;
  at::Tensor index(const at::Tensor & self, at::TensorList indices) const override;
  at::Tensor & index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) const override;
  at::Tensor index_put(const at::Tensor & self, at::TensorList indices, const at::Tensor & values, bool accumulate) const override;
  at::Tensor & index_put_(at::Tensor & self, at::TensorList indices, const at::Tensor & values, bool accumulate) const override;
  at::Tensor instance_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) const override;
  at::Tensor inverse(const at::Tensor & self) const override;
  at::Tensor & inverse_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor _inverse_helper(const at::Tensor & self) const override;
  at::Tensor isclose(const at::Tensor & self, const at::Tensor & other, double rtol, double atol, bool equal_nan) const override;
  at::Tensor isnan(const at::Tensor & self) const override;
  bool is_distributed(const at::Tensor & self) const override;
  bool is_floating_point(const at::Tensor & self) const override;
  bool is_complex(const at::Tensor & self) const override;
  bool is_nonzero(const at::Tensor & self) const override;
  bool is_same_size(const at::Tensor & self, const at::Tensor & other) const override;
  bool is_signed(const at::Tensor & self) const override;
  at::Tensor kl_div(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor kl_div_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  std::tuple<at::Tensor,at::Tensor> kthvalue(const at::Tensor & self, int64_t k, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor &,at::Tensor &> kthvalue_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool keepdim) const override;
  at::Tensor layer_norm(const at::Tensor & input, at::IntList normalized_shape, const at::Tensor & weight, const at::Tensor & bias, double eps, bool cudnn_enable) const override;
  at::Tensor linear(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias) const override;
  at::Tensor fbgemm_linear_int8_weight(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & packed, const at::Tensor & col_offsets, at::Scalar weight_scale, at::Scalar weight_zero_point, const at::Tensor & bias) const override;
  std::tuple<at::Tensor,at::Tensor,double,int64_t> fbgemm_linear_quantize_weight(const at::Tensor & input) const override;
  at::Tensor fbgemm_pack_quantized_matrix(const at::Tensor & input, int64_t K, int64_t N) const override;
  at::Tensor & linspace_out(at::Tensor & result, at::Scalar start, at::Scalar end, int64_t steps) const override;
  at::Tensor log(const at::Tensor & self) const override;
  at::Tensor & log_(at::Tensor & self) const override;
  at::Tensor & log_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor log10(const at::Tensor & self) const override;
  at::Tensor & log10_(at::Tensor & self) const override;
  at::Tensor & log10_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor log1p(const at::Tensor & self) const override;
  at::Tensor & log1p_(at::Tensor & self) const override;
  at::Tensor & log1p_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor log2(const at::Tensor & self) const override;
  at::Tensor & log2_(at::Tensor & self) const override;
  at::Tensor & log2_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor logdet(const at::Tensor & self) const override;
  at::Tensor & logspace_out(at::Tensor & result, at::Scalar start, at::Scalar end, int64_t steps) const override;
  at::Tensor log_softmax(const at::Tensor & self, int64_t dim, at::ScalarType dtype) const override;
  at::Tensor log_softmax(const at::Tensor & self, int64_t dim) const override;
  at::Tensor _log_softmax(const at::Tensor & self, int64_t dim, bool half_to_float) const override;
  at::Tensor _log_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) const override;
  at::Tensor logsumexp(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor & logsumexp_out(at::Tensor & result, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor margin_ranking_loss(const at::Tensor & input1, const at::Tensor & input2, const at::Tensor & target, double margin, int64_t reduction) const override;
  at::Tensor matmul(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & matmul_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor matrix_rank(const at::Tensor & self, double tol, bool symmetric) const override;
  at::Tensor matrix_rank(const at::Tensor & self, bool symmetric) const override;
  at::Tensor matrix_power(const at::Tensor & self, int64_t n) const override;
  std::tuple<at::Tensor,at::Tensor> max(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor &,at::Tensor &> max_out(at::Tensor & max, at::Tensor & max_values, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor max_values(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor,at::Tensor> max_pool1d_with_indices(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  at::Tensor max_pool1d(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  at::Tensor max_pool2d(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  at::Tensor max_pool3d(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  at::Tensor mean(const at::Tensor & self, at::ScalarType dtype) const override;
  at::Tensor mean(const at::Tensor & self) const override;
  at::Tensor mean(const at::Tensor & self, at::IntList dim, bool keepdim, at::ScalarType dtype) const override;
  at::Tensor mean(const at::Tensor & self, at::IntList dim, bool keepdim) const override;
  at::Tensor mean(const at::Tensor & self, at::IntList dim, at::ScalarType dtype) const override;
  at::Tensor & mean_out(at::Tensor & result, const at::Tensor & self, at::IntList dim, bool keepdim, at::ScalarType dtype) const override;
  at::Tensor & mean_out(at::Tensor & result, const at::Tensor & self, at::IntList dim, bool keepdim) const override;
  at::Tensor & mean_out(at::Tensor & result, const at::Tensor & self, at::IntList dim, at::ScalarType dtype) const override;
  std::tuple<at::Tensor,at::Tensor> median(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor &,at::Tensor &> median_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor,at::Tensor> min(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor &,at::Tensor &> min_out(at::Tensor & min, at::Tensor & min_indices, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor min_values(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor mkldnn_convolution(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntList padding, at::IntList stride, at::IntList dilation, int64_t groups) const override;
  at::Tensor mkldnn_convolution_backward_input(at::IntList self_size, const at::Tensor & grad_output, const at::Tensor & weight, at::IntList padding, at::IntList stride, at::IntList dilation, int64_t groups, bool bias_defined) const override;
  std::tuple<at::Tensor,at::Tensor> mkldnn_convolution_backward_weights(at::IntList weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding, at::IntList stride, at::IntList dilation, int64_t groups, bool bias_defined) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> mkldnn_convolution_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntList padding, at::IntList stride, at::IntList dilation, int64_t groups, std::array<bool,3> output_mask) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> miopen_batch_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double exponential_average_factor, double epsilon) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> miopen_batch_norm_backward(const at::Tensor & input, const at::Tensor & grad_output, const at::Tensor & weight, const at::Tensor & running_mean, const at::Tensor & running_var, const at::Tensor & save_mean, const at::Tensor & save_var, double epsilon) const override;
  at::Tensor miopen_convolution(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntList padding, at::IntList stride, at::IntList dilation, int64_t groups, bool benchmark, bool deterministic) const override;
  at::Tensor miopen_convolution_backward_input(at::IntList self_size, const at::Tensor & grad_output, const at::Tensor & weight, at::IntList padding, at::IntList stride, at::IntList dilation, int64_t groups, bool benchmark, bool deterministic) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> miopen_convolution_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntList padding, at::IntList stride, at::IntList dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const override;
  at::Tensor miopen_convolution_backward_bias(const at::Tensor & grad_output) const override;
  at::Tensor miopen_convolution_backward_weight(at::IntList weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding, at::IntList stride, at::IntList dilation, int64_t groups, bool benchmark, bool deterministic) const override;
  at::Tensor miopen_convolution_transpose(const at::Tensor & self, const at::Tensor & weight, const at::Tensor & bias, at::IntList padding, at::IntList output_padding, at::IntList stride, at::IntList dilation, int64_t groups, bool benchmark, bool deterministic) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> miopen_convolution_transpose_backward(const at::Tensor & self, const at::Tensor & grad_output, const at::Tensor & weight, at::IntList padding, at::IntList output_padding, at::IntList stride, at::IntList dilation, int64_t groups, bool benchmark, bool deterministic, std::array<bool,3> output_mask) const override;
  at::Tensor miopen_convolution_transpose_backward_input(const at::Tensor & grad_output, const at::Tensor & weight, at::IntList padding, at::IntList stride, at::IntList dilation, int64_t groups, bool benchmark, bool deterministic) const override;
  at::Tensor miopen_convolution_transpose_backward_weight(at::IntList weight_size, const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding, at::IntList stride, at::IntList dilation, int64_t groups, bool benchmark, bool deterministic) const override;
  at::Tensor mm(const at::Tensor & self, const at::Tensor & mat2) const override;
  at::Tensor & mm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat2) const override;
  at::Tensor _sparse_mm(const at::Tensor & sparse, const at::Tensor & dense) const override;
  std::tuple<at::Tensor,at::Tensor> mode(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  std::tuple<at::Tensor &,at::Tensor &> mode_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor mul(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & mul_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & mul_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor mul(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & mul_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor mv(const at::Tensor & self, const at::Tensor & vec) const override;
  at::Tensor & mv_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & vec) const override;
  at::Tensor mvlgamma(const at::Tensor & self, int64_t p) const override;
  at::Tensor & mvlgamma_(at::Tensor & self, int64_t p) const override;
  at::Tensor narrow_copy(const at::Tensor & self, int64_t dim, int64_t start, int64_t length) const override;
  at::Tensor narrow(const at::Tensor & self, int64_t dim, int64_t start, int64_t length) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> native_batch_norm(const at::Tensor & input, const at::Tensor & weight, const at::Tensor & bias, const at::Tensor & running_mean, const at::Tensor & running_var, bool training, double momentum, double eps) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> native_batch_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & weight, const at::Tensor & running_mean, const at::Tensor & running_var, const at::Tensor & save_mean, const at::Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) const override;
  std::tuple<at::Tensor,at::Tensor> batch_norm_update_stats(const at::Tensor & input, const at::Tensor & running_mean, const at::Tensor & running_var, double momentum) const override;
  at::Tensor & ones_out(at::Tensor & result, at::IntList size) const override;
  at::Tensor ones_like(const at::Tensor & self) const override;
  at::Tensor pairwise_distance(const at::Tensor & x1, const at::Tensor & x2, double p, double eps, bool keepdim) const override;
  at::Tensor pdist(const at::Tensor & self, double p) const override;
  at::Tensor _pdist_forward(const at::Tensor & self, double p) const override;
  at::Tensor _pdist_backward(const at::Tensor & grad, const at::Tensor & self, double p, const at::Tensor & pdist) const override;
  at::Tensor cosine_similarity(const at::Tensor & x1, const at::Tensor & x2, int64_t dim, double eps) const override;
  at::Tensor permute(const at::Tensor & self, at::IntList dims) const override;
  at::Tensor pixel_shuffle(const at::Tensor & self, int64_t upscale_factor) const override;
  at::Tensor pin_memory(const at::Tensor & self) const override;
  at::Tensor pinverse(const at::Tensor & self, double rcond) const override;
  at::Tensor & rand_out(at::Tensor & result, at::IntList size) const override;
  at::Tensor & rand_out(at::Tensor & result, at::IntList size, at::Generator * generator) const override;
  at::Tensor rand_like(const at::Tensor & self) const override;
  at::Tensor & randint_out(at::Tensor & result, int64_t high, at::IntList size) const override;
  at::Tensor & randint_out(at::Tensor & result, int64_t high, at::IntList size, at::Generator * generator) const override;
  at::Tensor & randint_out(at::Tensor & result, int64_t low, int64_t high, at::IntList size) const override;
  at::Tensor & randint_out(at::Tensor & result, int64_t low, int64_t high, at::IntList size, at::Generator * generator) const override;
  at::Tensor randint_like(const at::Tensor & self, int64_t high) const override;
  at::Tensor randint_like(const at::Tensor & self, int64_t low, int64_t high) const override;
  at::Tensor & randn_out(at::Tensor & result, at::IntList size) const override;
  at::Tensor & randn_out(at::Tensor & result, at::IntList size, at::Generator * generator) const override;
  at::Tensor randn_like(const at::Tensor & self) const override;
  at::Tensor & randperm_out(at::Tensor & result, int64_t n) const override;
  at::Tensor & randperm_out(at::Tensor & result, int64_t n, at::Generator * generator) const override;
  at::Tensor & range_out(at::Tensor & result, at::Scalar start, at::Scalar end, at::Scalar step) const override;
  at::Tensor repeat(const at::Tensor & self, at::IntList repeats) const override;
  at::Tensor reshape(const at::Tensor & self, at::IntList shape) const override;
  at::Tensor reshape_as(const at::Tensor & self, const at::Tensor & other) const override;
  std::tuple<at::Tensor,at::Tensor> RoiPooling2d_forward(const at::Tensor & input, const at::Tensor & rois, int64_t pooledHeight, int64_t pooledWidth, double spatialScale) const override;
  at::Tensor RoiPooling2d_backward(const at::Tensor & input, const at::Tensor & rois, int64_t pooledHeight, int64_t pooledWidth, double spatialScale, const at::Tensor & gradOutput, const at::Tensor & argmaxes) const override;
  at::Tensor round(const at::Tensor & self) const override;
  at::Tensor & round_(at::Tensor & self) const override;
  at::Tensor & round_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor rrelu(const at::Tensor & self, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) const override;
  at::Tensor & rrelu_(at::Tensor & self, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) const override;
  at::Tensor relu(const at::Tensor & self) const override;
  at::Tensor & relu_(at::Tensor & self) const override;
  at::Tensor prelu(const at::Tensor & self, const at::Tensor & weight) const override;
  std::tuple<at::Tensor,at::Tensor> prelu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight) const override;
  at::Tensor hardshrink(const at::Tensor & self, at::Scalar lambd) const override;
  at::Tensor hardshrink_backward(const at::Tensor & grad_out, const at::Tensor & self, at::Scalar lambd) const override;
  at::Tensor rsqrt(const at::Tensor & self) const override;
  at::Tensor & rsqrt_(at::Tensor & self) const override;
  at::Tensor & rsqrt_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor select(const at::Tensor & self, int64_t dim, int64_t index) const override;
  at::Tensor selu(const at::Tensor & self) const override;
  at::Tensor & selu_(at::Tensor & self) const override;
  at::Tensor celu(const at::Tensor & self, at::Scalar alpha) const override;
  at::Tensor & celu_(at::Tensor & self, at::Scalar alpha) const override;
  at::Tensor sigmoid(const at::Tensor & self) const override;
  at::Tensor & sigmoid_(at::Tensor & self) const override;
  at::Tensor & sigmoid_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor sin(const at::Tensor & self) const override;
  at::Tensor & sin_(at::Tensor & self) const override;
  at::Tensor & sin_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor sinh(const at::Tensor & self) const override;
  at::Tensor & sinh_(at::Tensor & self) const override;
  at::Tensor & sinh_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor detach(const at::Tensor & self) const override;
  at::Tensor & detach_(at::Tensor & self) const override;
  int64_t size(const at::Tensor & self, int64_t dim) const override;
  at::Tensor slice(const at::Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) const override;
  std::tuple<at::Tensor,at::Tensor> slogdet(const at::Tensor & self) const override;
  at::Tensor smm(const at::Tensor & self, const at::Tensor & mat2) const override;
  at::Tensor softmax(const at::Tensor & self, int64_t dim, at::ScalarType dtype) const override;
  at::Tensor softmax(const at::Tensor & self, int64_t dim) const override;
  at::Tensor _softmax(const at::Tensor & self, int64_t dim, bool half_to_float) const override;
  at::Tensor _softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) const override;
  at::Tensor & _sparse_add_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) const override;
  at::Tensor & _sparse_dense_add_out(at::Tensor & result, const at::Tensor & self, at::SparseTensorRef other, at::Scalar alpha) const override;
  at::Tensor & _sparse_div_zerodim_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _sparse_div_scalar_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & _sparse_mul_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _sparse_mul_zerodim_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & _sparse_mul_scalar_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  std::vector<at::Tensor> split(const at::Tensor & self, int64_t split_size, int64_t dim) const override;
  std::vector<at::Tensor> split_with_sizes(const at::Tensor & self, at::IntList split_sizes, int64_t dim) const override;
  at::Tensor squeeze(const at::Tensor & self) const override;
  at::Tensor squeeze(const at::Tensor & self, int64_t dim) const override;
  at::Tensor & squeeze_(at::Tensor & self) const override;
  at::Tensor & squeeze_(at::Tensor & self, int64_t dim) const override;
  at::Tensor sspaddmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & sspaddmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor stack(at::TensorList tensors, int64_t dim) const override;
  at::Tensor & stack_out(at::Tensor & result, at::TensorList tensors, int64_t dim) const override;
  at::Tensor stft(const at::Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const at::Tensor & window, bool normalized, bool onesided) const override;
  int64_t stride(const at::Tensor & self, int64_t dim) const override;
  at::Tensor sum(const at::Tensor & self, at::ScalarType dtype) const override;
  at::Tensor sum(const at::Tensor & self) const override;
  at::Tensor sum(const at::Tensor & self, at::IntList dim, bool keepdim, at::ScalarType dtype) const override;
  at::Tensor sum(const at::Tensor & self, at::IntList dim, bool keepdim) const override;
  at::Tensor sum(const at::Tensor & self, at::IntList dim, at::ScalarType dtype) const override;
  at::Tensor & sum_out(at::Tensor & result, const at::Tensor & self, at::IntList dim, bool keepdim, at::ScalarType dtype) const override;
  at::Tensor & sum_out(at::Tensor & result, const at::Tensor & self, at::IntList dim, bool keepdim) const override;
  at::Tensor & sum_out(at::Tensor & result, const at::Tensor & self, at::IntList dim, at::ScalarType dtype) const override;
  at::Tensor sum_to_size(const at::Tensor & self, at::IntList size) const override;
  at::Tensor sqrt(const at::Tensor & self) const override;
  at::Tensor & sqrt_(at::Tensor & self) const override;
  at::Tensor & sqrt_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor std(const at::Tensor & self, bool unbiased) const override;
  at::Tensor std(const at::Tensor & self, at::IntList dim, bool unbiased, bool keepdim) const override;
  at::Tensor & std_out(at::Tensor & result, const at::Tensor & self, at::IntList dim, bool unbiased, bool keepdim) const override;
  at::Tensor prod(const at::Tensor & self, at::ScalarType dtype) const override;
  at::Tensor prod(const at::Tensor & self) const override;
  at::Tensor prod(const at::Tensor & self, int64_t dim, bool keepdim, at::ScalarType dtype) const override;
  at::Tensor prod(const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor prod(const at::Tensor & self, int64_t dim, at::ScalarType dtype) const override;
  at::Tensor & prod_out(at::Tensor & result, const at::Tensor & self, int64_t dim, bool keepdim, at::ScalarType dtype) const override;
  at::Tensor & prod_out(at::Tensor & result, const at::Tensor & self, int64_t dim, bool keepdim) const override;
  at::Tensor & prod_out(at::Tensor & result, const at::Tensor & self, int64_t dim, at::ScalarType dtype) const override;
  at::Tensor t(const at::Tensor & self) const override;
  at::Tensor & t_(at::Tensor & self) const override;
  at::Tensor tan(const at::Tensor & self) const override;
  at::Tensor & tan_(at::Tensor & self) const override;
  at::Tensor & tan_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor tanh(const at::Tensor & self) const override;
  at::Tensor & tanh_(at::Tensor & self) const override;
  at::Tensor & tanh_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor tensordot(const at::Tensor & self, const at::Tensor & other, at::IntList dims_self, at::IntList dims_other) const override;
  at::Tensor threshold(const at::Tensor & self, at::Scalar threshold, at::Scalar value) const override;
  at::Tensor & threshold_(at::Tensor & self, at::Scalar threshold, at::Scalar value) const override;
  at::Tensor & threshold_out(at::Tensor & result, const at::Tensor & self, at::Scalar threshold, at::Scalar value) const override;
  at::Tensor threshold_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar threshold) const override;
  at::Tensor transpose(const at::Tensor & self, int64_t dim0, int64_t dim1) const override;
  at::Tensor & transpose_(at::Tensor & self, int64_t dim0, int64_t dim1) const override;
  at::Tensor one_hot(const at::Tensor & self, int64_t num_classes) const override;
  at::Tensor flip(const at::Tensor & self, at::IntList dims) const override;
  at::Tensor roll(const at::Tensor & self, at::IntList shifts, at::IntList dims) const override;
  at::Tensor rot90(const at::Tensor & self, int64_t k, at::IntList dims) const override;
  at::Tensor _trilinear(const at::Tensor & i1, const at::Tensor & i2, const at::Tensor & i3, at::IntList expand1, at::IntList expand2, at::IntList expand3, at::IntList sumdim, int64_t unroll_dim) const override;
  at::Tensor triplet_margin_loss(const at::Tensor & anchor, const at::Tensor & positive, const at::Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) const override;
  at::Tensor trunc(const at::Tensor & self) const override;
  at::Tensor & trunc_(at::Tensor & self) const override;
  at::Tensor & trunc_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor type_as(const at::Tensor & self, const at::Tensor & other) const override;
  std::tuple<at::Tensor,at::Tensor> _unique(const at::Tensor & self, bool sorted, bool return_inverse) const override;
  std::tuple<at::Tensor,at::Tensor> _unique_dim(const at::Tensor & self, int64_t dim, bool sorted, bool return_inverse) const override;
  at::Tensor _unsafe_view(const at::Tensor & self, at::IntList size) const override;
  at::Tensor unsqueeze(const at::Tensor & self, int64_t dim) const override;
  at::Tensor & unsqueeze_(at::Tensor & self, int64_t dim) const override;
  at::Tensor var(const at::Tensor & self, bool unbiased) const override;
  at::Tensor var(const at::Tensor & self, at::IntList dim, bool unbiased, bool keepdim) const override;
  at::Tensor & var_out(at::Tensor & result, const at::Tensor & self, at::IntList dim, bool unbiased, bool keepdim) const override;
  at::Tensor view_as(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor _s_where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor norm_except_dim(const at::Tensor & v, int64_t pow, int64_t dim) const override;
  at::Tensor _weight_norm(const at::Tensor & v, const at::Tensor & g, int64_t dim) const override;
  std::tuple<at::Tensor,at::Tensor> _weight_norm_cuda_interface(const at::Tensor & v, const at::Tensor & g, int64_t dim) const override;
  std::tuple<at::Tensor,at::Tensor> _weight_norm_cuda_interface_backward(const at::Tensor & grad_w, const at::Tensor & saved_v, const at::Tensor & saved_g, const at::Tensor & saved_norms, int64_t dim) const override;
  std::tuple<at::Tensor,at::Tensor> _weight_norm_differentiable_backward(const at::Tensor & grad_w, const at::Tensor & saved_v, const at::Tensor & saved_g, const at::Tensor & saved_norms, int64_t dim) const override;
  at::Tensor & zeros_out(at::Tensor & result, at::IntList size) const override;
  at::Tensor zeros_like(const at::Tensor & self) const override;
  at::Tensor _standard_gamma_grad(const at::Tensor & self, const at::Tensor & output) const override;
  at::Tensor _standard_gamma(const at::Tensor & self, at::Generator * generator) const override;
  at::Tensor poisson(const at::Tensor & self, at::Generator * generator) const override;
  at::Tensor native_norm(const at::Tensor & self, at::Scalar p) const override;
  at::Tensor _sparse_sum(const at::Tensor & self) const override;
  at::Tensor _sparse_sum(const at::Tensor & self, at::ScalarType dtype) const override;
  at::Tensor _sparse_sum(const at::Tensor & self, at::IntList dim) const override;
  at::Tensor _sparse_sum(const at::Tensor & self, at::IntList dim, at::ScalarType dtype) const override;
  at::Tensor _sparse_sum_backward(const at::Tensor & grad, const at::Tensor & self, at::IntList dim) const override;
  at::Tensor norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::ScalarType dtype) const override;
  at::Tensor norm(const at::Tensor & self, at::Scalar p) const override;
  at::Tensor norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::IntList dim, bool keepdim, at::ScalarType dtype) const override;
  at::Tensor norm(const at::Tensor & self, c10::optional<at::Scalar> p, at::IntList dim, bool keepdim) const override;
  at::Tensor & norm_out(at::Tensor & result, const at::Tensor & self, c10::optional<at::Scalar> p, at::IntList dim, bool keepdim, at::ScalarType dtype) const override;
  at::Tensor & norm_out(at::Tensor & result, const at::Tensor & self, c10::optional<at::Scalar> p, at::IntList dim, bool keepdim) const override;
  at::Tensor frobenius_norm(const at::Tensor & self) const override;
  at::Tensor frobenius_norm(const at::Tensor & self, at::IntList dim, bool keepdim) const override;
  at::Tensor & frobenius_norm_out(at::Tensor & result, const at::Tensor & self, at::IntList dim, bool keepdim) const override;
  at::Tensor nuclear_norm(const at::Tensor & self, bool keepdim) const override;
  at::Tensor & nuclear_norm_out(at::Tensor & result, const at::Tensor & self, bool keepdim) const override;
  at::Tensor native_clone(const at::Tensor & self) const override;
  at::Tensor clone(const at::Tensor & self) const override;
  at::Tensor & native_resize_as_(at::Tensor & self, const at::Tensor & the_template) const override;
  at::Tensor & resize_as_(at::Tensor & self, const at::Tensor & the_template) const override;
  at::Tensor & native_pow_out(at::Tensor & result, const at::Tensor & self, at::Scalar exponent) const override;
  at::Tensor native_pow(const at::Tensor & self, at::Scalar exponent) const override;
  at::Tensor & pow_out(at::Tensor & result, const at::Tensor & self, at::Scalar exponent) const override;
  at::Tensor pow(const at::Tensor & self, at::Scalar exponent) const override;
  at::Tensor & native_zero_(at::Tensor & self) const override;
  at::Tensor & zero_(at::Tensor & self) const override;
  at::Tensor & sub_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) const override;
  at::Tensor sub(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) const override;
  at::Tensor & sub_(at::Tensor & self, const at::Tensor & other, at::Scalar alpha) const override;
  at::Tensor sub(const at::Tensor & self, at::Scalar other, at::Scalar alpha) const override;
  at::Tensor & sub_(at::Tensor & self, at::Scalar other, at::Scalar alpha) const override;
  at::Tensor rsub(const at::Tensor & self, const at::Tensor & other, at::Scalar alpha) const override;
  at::Tensor rsub(const at::Tensor & self, at::Scalar other, at::Scalar alpha) const override;
  at::Tensor & s_native_addmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor s_native_addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & s_native_addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor _sparse_addmm(const at::Tensor & self, const at::Tensor & sparse, const at::Tensor & dense, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & addmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, at::IntList size, const at::TensorOptions & options) const override;
  at::Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, at::IntList size, const at::Tensor & indices, const at::Tensor & values, const at::TensorOptions & options) const override;
  at::Tensor & sparse_resize_(at::Tensor & self, at::IntList size, int64_t sparse_dim, int64_t dense_dim) const override;
  at::Tensor & sparse_resize_and_clear_(at::Tensor & self, at::IntList size, int64_t sparse_dim, int64_t dense_dim) const override;
  at::Tensor sparse_mask(const at::Tensor & self, at::SparseTensorRef mask) const override;
  at::Tensor to_dense(const at::Tensor & self) const override;
  int64_t sparse_dim(const at::Tensor & self) const override;
  int64_t _dimI(const at::Tensor & self) const override;
  int64_t dense_dim(const at::Tensor & self) const override;
  int64_t _dimV(const at::Tensor & self) const override;
  int64_t _nnz(const at::Tensor & self) const override;
  at::Tensor coalesce(const at::Tensor & self) const override;
  bool is_coalesced(const at::Tensor & self) const override;
  at::Tensor _indices(const at::Tensor & self) const override;
  at::Tensor _values(const at::Tensor & self) const override;
  at::Tensor & _coalesced_(at::Tensor & self, bool coalesced) const override;
  at::Tensor indices(const at::Tensor & self) const override;
  at::Tensor values(const at::Tensor & self) const override;
  at::Tensor & hspmm_out(at::Tensor & result, const at::Tensor & mat1, const at::Tensor & mat2) const override;
  at::Tensor hspmm(const at::Tensor & mat1, const at::Tensor & mat2) const override;
  at::Tensor & copy_sparse_to_sparse_(at::Tensor & self, const at::Tensor & src, bool non_blocking) const override;
  int64_t numel(const at::Tensor & self) const override;
  std::vector<at::Tensor> unbind(const at::Tensor & self, int64_t dim) const override;
  at::Tensor to_sparse(const at::Tensor & self, int64_t sparse_dim) const override;
  at::Tensor to_sparse(const at::Tensor & self) const override;
  at::Tensor to(const at::Tensor & self, const at::TensorOptions & options, bool non_blocking, bool copy) const override;
  at::Tensor to(const at::Tensor & self, c10::Device device, at::ScalarType dtype, bool non_blocking, bool copy) const override;
  at::Tensor to(const at::Tensor & self, at::ScalarType dtype, bool non_blocking, bool copy) const override;
  at::Tensor to(const at::Tensor & self, const at::Tensor & other, bool non_blocking, bool copy) const override;
  std::vector<at::Tensor> meshgrid(at::TensorList tensors) const override;
  at::Tensor cartesian_prod(at::TensorList tensors) const override;
  at::Tensor combinations(const at::Tensor & self, int64_t r, bool with_replacement) const override;
  at::Scalar item(const at::Tensor & self) const override;
  at::Scalar _local_scalar_dense(const at::Tensor & self) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> _thnn_fused_lstm_cell(const at::Tensor & input_gates, const at::Tensor & hidden_gates, const at::Tensor & cx, const at::Tensor & input_bias, const at::Tensor & hidden_bias) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> _thnn_fused_lstm_cell_backward(const at::Tensor & grad_hy, const at::Tensor & grad_cy, const at::Tensor & cx, const at::Tensor & cy, const at::Tensor & workspace, bool has_bias) const override;
  std::tuple<at::Tensor,at::Tensor> _thnn_fused_gru_cell(const at::Tensor & input_gates, const at::Tensor & hidden_gates, const at::Tensor & hx, const at::Tensor & input_bias, const at::Tensor & hidden_bias) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor,at::Tensor> _thnn_fused_gru_cell_backward(const at::Tensor & grad_hy, const at::Tensor & workspace, bool has_bias) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> lstm(const at::Tensor & input, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> lstm(const at::Tensor & data, const at::Tensor & batch_sizes, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const override;
  std::tuple<at::Tensor,at::Tensor> gru(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const override;
  std::tuple<at::Tensor,at::Tensor> gru(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const override;
  std::tuple<at::Tensor,at::Tensor> rnn_tanh(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const override;
  std::tuple<at::Tensor,at::Tensor> rnn_tanh(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const override;
  std::tuple<at::Tensor,at::Tensor> rnn_relu(const at::Tensor & input, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const override;
  std::tuple<at::Tensor,at::Tensor> rnn_relu(const at::Tensor & data, const at::Tensor & batch_sizes, const at::Tensor & hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) const override;
  std::tuple<at::Tensor,at::Tensor> lstm_cell(const at::Tensor & input, at::TensorList hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) const override;
  at::Tensor gru_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) const override;
  at::Tensor rnn_tanh_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) const override;
  at::Tensor rnn_relu_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> quantized_lstm(const at::Tensor & input, at::TensorList hx, at::TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) const override;
  std::tuple<at::Tensor,at::Tensor> quantized_lstm_cell(const at::Tensor & input, at::TensorList hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) const override;
  at::Tensor quantized_gru_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) const override;
  at::Tensor quantized_rnn_relu_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) const override;
  at::Tensor quantized_rnn_tanh_cell(const at::Tensor & input, const at::Tensor & hx, const at::Tensor & w_ih, const at::Tensor & w_hh, const at::Tensor & b_ih, const at::Tensor & b_hh, const at::Tensor & packed_ih, const at::Tensor & packed_hh, const at::Tensor & col_offsets_ih, const at::Tensor & col_offsets_hh, at::Scalar scale_ih, at::Scalar scale_hh, at::Scalar zero_point_ih, at::Scalar zero_point_hh) const override;
  std::tuple<at::Tensor,at::Tensor> _pack_padded_sequence(const at::Tensor & input, const at::Tensor & lengths, bool batch_first) const override;
  at::Tensor _pack_padded_sequence_backward(const at::Tensor & grad, at::IntList input_size, const at::Tensor & batch_sizes, bool batch_first) const override;
  std::tuple<at::Tensor,at::Tensor> _pad_packed_sequence(const at::Tensor & data, const at::Tensor & batch_sizes, bool batch_first, at::Scalar padding_value, int64_t total_length) const override;
  void* data_ptr(const at::Tensor & self) const override;
  at::Tensor & set_(at::Tensor & self, at::Storage source) const override;
  at::Tensor & set_(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntList size, at::IntList stride) const override;
  at::Tensor & set_(at::Tensor & self, const at::Tensor & source) const override;
  at::Tensor & set_(at::Tensor & self) const override;
  bool is_set_to(const at::Tensor & self, const at::Tensor & tensor) const override;
  at::Tensor & masked_fill_(at::Tensor & self, const at::Tensor & mask, at::Scalar value) const override;
  at::Tensor & masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) const override;
  at::Tensor & masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) const override;
  at::Tensor view(const at::Tensor & self, at::IntList size) const override;
  at::Tensor & put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate) const override;
  at::Tensor & index_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) const override;
  at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) const override;
  at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value) const override;
  at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) const override;
  at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, at::Scalar value) const override;
  at::Tensor & scatter_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) const override;
  at::Tensor & lt_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & lt_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & gt_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & gt_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & le_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & le_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & ge_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & ge_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & eq_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & eq_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & ne_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & ne_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor __and__(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor __and__(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & __iand__(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & __iand__(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor __or__(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor __or__(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & __ior__(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & __ior__(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor __xor__(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor __xor__(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & __ixor__(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & __ixor__(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor __lshift__(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor __lshift__(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & __ilshift__(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & __ilshift__(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor __rshift__(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor __rshift__(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & __irshift__(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & __irshift__(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & lgamma_(at::Tensor & self) const override;
  at::Tensor & atan2_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & tril_(at::Tensor & self, int64_t diagonal) const override;
  at::Tensor & triu_(at::Tensor & self, int64_t diagonal) const override;
  at::Tensor & digamma_(at::Tensor & self) const override;
  at::Tensor & polygamma_(at::Tensor & self, int64_t n) const override;
  at::Tensor & erfinv_(at::Tensor & self) const override;
  at::Tensor & frac_(at::Tensor & self) const override;
  at::Tensor & renorm_(at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) const override;
  at::Tensor & reciprocal_(at::Tensor & self) const override;
  at::Tensor & neg_(at::Tensor & self) const override;
  at::Tensor & pow_(at::Tensor & self, at::Scalar exponent) const override;
  at::Tensor & pow_(at::Tensor & self, const at::Tensor & exponent) const override;
  at::Tensor & lerp_(at::Tensor & self, const at::Tensor & end, at::Scalar weight) const override;
  at::Tensor & sign_(at::Tensor & self) const override;
  at::Tensor & fmod_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & fmod_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & remainder_(at::Tensor & self, at::Scalar other) const override;
  at::Tensor & remainder_(at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & addbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & addbmm_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor addbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, at::Scalar beta, at::Scalar alpha) const override;
  at::Tensor & addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor & addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor & random_(at::Tensor & self, int64_t from, int64_t to, at::Generator * generator) const override;
  at::Tensor & random_(at::Tensor & self, int64_t to, at::Generator * generator) const override;
  at::Tensor & random_(at::Tensor & self, at::Generator * generator) const override;
  at::Tensor & uniform_(at::Tensor & self, double from, double to, at::Generator * generator) const override;
  at::Tensor & normal_(at::Tensor & self, double mean, double std, at::Generator * generator) const override;
  at::Tensor & cauchy_(at::Tensor & self, double median, double sigma, at::Generator * generator) const override;
  at::Tensor & log_normal_(at::Tensor & self, double mean, double std, at::Generator * generator) const override;
  at::Tensor & exponential_(at::Tensor & self, double lambd, at::Generator * generator) const override;
  at::Tensor & geometric_(at::Tensor & self, double p, at::Generator * generator) const override;
  at::Tensor & diag_out(at::Tensor & result, const at::Tensor & self, int64_t diagonal) const override;
  at::Tensor diag(const at::Tensor & self, int64_t diagonal) const override;
  at::Tensor & cross_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other, int64_t dim) const override;
  at::Tensor cross(const at::Tensor & self, const at::Tensor & other, int64_t dim) const override;
  at::Tensor & triu_out(at::Tensor & result, const at::Tensor & self, int64_t diagonal) const override;
  at::Tensor triu(const at::Tensor & self, int64_t diagonal) const override;
  at::Tensor & tril_out(at::Tensor & result, const at::Tensor & self, int64_t diagonal) const override;
  at::Tensor tril(const at::Tensor & self, int64_t diagonal) const override;
  at::Tensor tril_indices(int64_t row, int64_t col, int64_t offset, const at::TensorOptions & options) const override;
  at::Tensor triu_indices(int64_t row, int64_t col, int64_t offset, const at::TensorOptions & options) const override;
  at::Tensor trace(const at::Tensor & self) const override;
  at::Tensor & ne_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor ne(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & ne_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor ne(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & eq_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor eq(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & eq_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor eq(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & ge_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor ge(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & ge_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor ge(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & le_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor le(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & le_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor le(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & gt_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor gt(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & gt_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor gt(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & lt_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor lt(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & lt_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor lt(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & take_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & index) const override;
  at::Tensor take(const at::Tensor & self, const at::Tensor & index) const override;
  at::Tensor & index_select_out(at::Tensor & result, const at::Tensor & self, int64_t dim, const at::Tensor & index) const override;
  at::Tensor index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index) const override;
  at::Tensor & masked_select_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & mask) const override;
  at::Tensor masked_select(const at::Tensor & self, const at::Tensor & mask) const override;
  at::Tensor & nonzero_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor nonzero(const at::Tensor & self) const override;
  at::Tensor & gather_out(at::Tensor & result, const at::Tensor & self, int64_t dim, const at::Tensor & index) const override;
  at::Tensor gather(const at::Tensor & self, int64_t dim, const at::Tensor & index) const override;
  at::Tensor & addcmul_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor & addcdiv_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  at::Tensor addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, at::Scalar value) const override;
  std::tuple<at::Tensor &,at::Tensor &> gels_out(at::Tensor & X, at::Tensor & qr, const at::Tensor & self, const at::Tensor & A) const override;
  std::tuple<at::Tensor,at::Tensor> gels(const at::Tensor & self, const at::Tensor & A) const override;
  std::tuple<at::Tensor &,at::Tensor &> trtrs_out(at::Tensor & X, at::Tensor & M, const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) const override;
  std::tuple<at::Tensor,at::Tensor> trtrs(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) const override;
  std::tuple<at::Tensor &,at::Tensor &> symeig_out(at::Tensor & e, at::Tensor & V, const at::Tensor & self, bool eigenvectors, bool upper) const override;
  std::tuple<at::Tensor,at::Tensor> symeig(const at::Tensor & self, bool eigenvectors, bool upper) const override;
  std::tuple<at::Tensor &,at::Tensor &> eig_out(at::Tensor & e, at::Tensor & v, const at::Tensor & self, bool eigenvectors) const override;
  std::tuple<at::Tensor,at::Tensor> eig(const at::Tensor & self, bool eigenvectors) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> svd_out(at::Tensor & U, at::Tensor & S, at::Tensor & V, const at::Tensor & self, bool some, bool compute_uv) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> svd(const at::Tensor & self, bool some, bool compute_uv) const override;
  at::Tensor & cholesky_out(at::Tensor & result, const at::Tensor & self, bool upper) const override;
  at::Tensor cholesky(const at::Tensor & self, bool upper) const override;
  at::Tensor _cholesky_helper(const at::Tensor & self, bool upper) const override;
  at::Tensor & cholesky_solve_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & input2, bool upper) const override;
  at::Tensor cholesky_solve(const at::Tensor & self, const at::Tensor & input2, bool upper) const override;
  at::Tensor _cholesky_solve_helper(const at::Tensor & self, const at::Tensor & A, bool upper) const override;
  at::Tensor & potri_out(at::Tensor & result, const at::Tensor & self, bool upper) const override;
  at::Tensor potri(const at::Tensor & self, bool upper) const override;
  std::tuple<at::Tensor &,at::Tensor &> pstrf_out(at::Tensor & u, at::Tensor & piv, const at::Tensor & self, bool upper, at::Scalar tol) const override;
  std::tuple<at::Tensor,at::Tensor> pstrf(const at::Tensor & self, bool upper, at::Scalar tol) const override;
  std::tuple<at::Tensor &,at::Tensor &> qr_out(at::Tensor & Q, at::Tensor & R, const at::Tensor & self) const override;
  std::tuple<at::Tensor,at::Tensor> qr(const at::Tensor & self) const override;
  std::tuple<at::Tensor &,at::Tensor &> geqrf_out(at::Tensor & result0, at::Tensor & result1, const at::Tensor & self) const override;
  std::tuple<at::Tensor,at::Tensor> geqrf(const at::Tensor & self) const override;
  at::Tensor & orgqr_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & input2) const override;
  at::Tensor orgqr(const at::Tensor & self, const at::Tensor & input2) const override;
  at::Tensor & ormqr_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) const override;
  at::Tensor ormqr(const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) const override;
  std::tuple<at::Tensor &,at::Tensor &> btrifact_out(at::Tensor & A_LU, at::Tensor & pivots, const at::Tensor & self, bool pivot) const override;
  std::tuple<at::Tensor,at::Tensor> btrifact(const at::Tensor & self, bool pivot) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> btrifact_with_info_out(at::Tensor & A_LU, at::Tensor & pivots, at::Tensor & info, const at::Tensor & self, bool pivot) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> btrifact_with_info(const at::Tensor & self, bool pivot) const override;
  at::Tensor & btrisolve_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) const override;
  at::Tensor btrisolve(const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) const override;
  at::Tensor & multinomial_out(at::Tensor & result, const at::Tensor & self, int64_t num_samples, bool replacement, at::Generator * generator) const override;
  at::Tensor multinomial(const at::Tensor & self, int64_t num_samples, bool replacement, at::Generator * generator) const override;
  at::Tensor & lgamma_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor lgamma(const at::Tensor & self) const override;
  at::Tensor & digamma_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor digamma(const at::Tensor & self) const override;
  at::Tensor & polygamma_out(at::Tensor & result, int64_t n, const at::Tensor & self) const override;
  at::Tensor polygamma(int64_t n, const at::Tensor & self) const override;
  at::Tensor & erfinv_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor erfinv(const at::Tensor & self) const override;
  at::Tensor & frac_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor frac(const at::Tensor & self) const override;
  at::Tensor dist(const at::Tensor & self, const at::Tensor & other, at::Scalar p) const override;
  at::Tensor & reciprocal_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor reciprocal(const at::Tensor & self) const override;
  at::Tensor & neg_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor neg(const at::Tensor & self) const override;
  at::Tensor & atan2_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor atan2(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & lerp_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & end, at::Scalar weight) const override;
  at::Tensor lerp(const at::Tensor & self, const at::Tensor & end, at::Scalar weight) const override;
  at::Tensor & histc_out(at::Tensor & result, const at::Tensor & self, int64_t bins, at::Scalar min, at::Scalar max) const override;
  at::Tensor histc(const at::Tensor & self, int64_t bins, at::Scalar min, at::Scalar max) const override;
  at::Tensor & sign_out(at::Tensor & result, const at::Tensor & self) const override;
  at::Tensor sign(const at::Tensor & self) const override;
  at::Tensor & fmod_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor fmod(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & fmod_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor fmod(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & remainder_out(at::Tensor & result, const at::Tensor & self, at::Scalar other) const override;
  at::Tensor remainder(const at::Tensor & self, at::Scalar other) const override;
  at::Tensor & remainder_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor remainder(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & min_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor min(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor min(const at::Tensor & self) const override;
  at::Tensor & max_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor max(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor max(const at::Tensor & self) const override;
  at::Tensor median(const at::Tensor & self) const override;
  std::tuple<at::Tensor &,at::Tensor &> sort_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool descending) const override;
  std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, int64_t dim, bool descending) const override;
  std::tuple<at::Tensor &,at::Tensor &> topk_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const override;
  std::tuple<at::Tensor,at::Tensor> topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) const override;
  at::Tensor all(const at::Tensor & self) const override;
  at::Tensor any(const at::Tensor & self) const override;
  at::Tensor & renorm_out(at::Tensor & result, const at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) const override;
  at::Tensor renorm(const at::Tensor & self, at::Scalar p, int64_t dim, at::Scalar maxnorm) const override;
  at::Tensor unfold(const at::Tensor & self, int64_t dimension, int64_t size, int64_t step) const override;
  bool equal(const at::Tensor & self, const at::Tensor & other) const override;
  at::Tensor & pow_out(at::Tensor & result, const at::Tensor & self, const at::Tensor & exponent) const override;
  at::Tensor pow(const at::Tensor & self, const at::Tensor & exponent) const override;
  at::Tensor & pow_out(at::Tensor & result, at::Scalar self, const at::Tensor & exponent) const override;
  at::Tensor pow(at::Scalar self, const at::Tensor & exponent) const override;
  at::Tensor & normal_out(at::Tensor & output, const at::Tensor & mean, double std, at::Generator * generator) const override;
  at::Tensor normal(const at::Tensor & mean, double std, at::Generator * generator) const override;
  at::Tensor & normal_out(at::Tensor & output, double mean, const at::Tensor & std, at::Generator * generator) const override;
  at::Tensor normal(double mean, const at::Tensor & std, at::Generator * generator) const override;
  at::Tensor & normal_out(at::Tensor & output, const at::Tensor & mean, const at::Tensor & std, at::Generator * generator) const override;
  at::Tensor normal(const at::Tensor & mean, const at::Tensor & std, at::Generator * generator) const override;
  at::Tensor alias(const at::Tensor & self) const override;
  at::Tensor & _dirichlet_grad_out(at::Tensor & output, const at::Tensor & x, const at::Tensor & alpha, const at::Tensor & total) const override;
  at::Tensor _dirichlet_grad(const at::Tensor & x, const at::Tensor & alpha, const at::Tensor & total) const override;
  at::Tensor & binary_cross_entropy_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor binary_cross_entropy(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor & binary_cross_entropy_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor binary_cross_entropy_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor & mse_loss_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor mse_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & mse_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor mse_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & l1_loss_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & multi_margin_loss_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor multi_margin_loss(const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor & multi_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor multi_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, at::Scalar p, at::Scalar margin, const at::Tensor & weight, int64_t reduction) const override;
  at::Tensor & multilabel_margin_loss_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor multilabel_margin_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  std::tuple<at::Tensor &,at::Tensor &> multilabel_margin_loss_forward_out(at::Tensor & output, at::Tensor & is_target, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  std::tuple<at::Tensor,at::Tensor> multilabel_margin_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & multilabel_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) const override;
  at::Tensor multilabel_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) const override;
  at::Tensor & nll_loss_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  at::Tensor nll_loss(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  std::tuple<at::Tensor &,at::Tensor &> nll_loss_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  std::tuple<at::Tensor,at::Tensor> nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  at::Tensor & nll_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) const override;
  at::Tensor nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) const override;
  at::Tensor & nll_loss2d_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  at::Tensor nll_loss2d(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  std::tuple<at::Tensor &,at::Tensor &> nll_loss2d_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  std::tuple<at::Tensor,at::Tensor> nll_loss2d_forward(const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index) const override;
  at::Tensor & nll_loss2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) const override;
  at::Tensor nll_loss2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Tensor & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) const override;
  at::Tensor & smooth_l1_loss_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor smooth_l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & smooth_l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor smooth_l1_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & soft_margin_loss_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor soft_margin_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & soft_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor soft_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) const override;
  at::Tensor & elu_out(at::Tensor & output, const at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) const override;
  at::Tensor elu(const at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) const override;
  at::Tensor & elu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale, const at::Tensor & output) const override;
  at::Tensor elu_backward(const at::Tensor & grad_output, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale, const at::Tensor & output) const override;
  at::Tensor & elu_(at::Tensor & self, at::Scalar alpha, at::Scalar scale, at::Scalar input_scale) const override;
  at::Tensor & glu_out(at::Tensor & output, const at::Tensor & self, int64_t dim) const override;
  at::Tensor glu(const at::Tensor & self, int64_t dim) const override;
  at::Tensor & glu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) const override;
  at::Tensor glu_backward(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) const override;
  at::Tensor & hardtanh_out(at::Tensor & output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor hardtanh(const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor & hardtanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor hardtanh_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor & hardtanh_(at::Tensor & self, at::Scalar min_val, at::Scalar max_val) const override;
  at::Tensor & leaky_relu_out(at::Tensor & output, const at::Tensor & self, at::Scalar negative_slope) const override;
  at::Tensor leaky_relu(const at::Tensor & self, at::Scalar negative_slope) const override;
  at::Tensor & leaky_relu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar negative_slope) const override;
  at::Tensor leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar negative_slope) const override;
  at::Tensor & leaky_relu_(at::Tensor & self, at::Scalar negative_slope) const override;
  at::Tensor & log_sigmoid_out(at::Tensor & output, const at::Tensor & self) const override;
  at::Tensor log_sigmoid(const at::Tensor & self) const override;
  std::tuple<at::Tensor &,at::Tensor &> log_sigmoid_forward_out(at::Tensor & output, at::Tensor & buffer, const at::Tensor & self) const override;
  std::tuple<at::Tensor,at::Tensor> log_sigmoid_forward(const at::Tensor & self) const override;
  at::Tensor & log_sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) const override;
  at::Tensor log_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) const override;
  at::Tensor & rrelu_with_noise_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) const override;
  at::Tensor rrelu_with_noise(const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) const override;
  at::Tensor & rrelu_with_noise_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training) const override;
  at::Tensor rrelu_with_noise_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training) const override;
  at::Tensor & rrelu_with_noise_(at::Tensor & self, const at::Tensor & noise, at::Scalar lower, at::Scalar upper, bool training, at::Generator * generator) const override;
  at::Tensor & softplus_out(at::Tensor & output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold) const override;
  at::Tensor softplus(const at::Tensor & self, at::Scalar beta, at::Scalar threshold) const override;
  at::Tensor & softplus_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold, const at::Tensor & output) const override;
  at::Tensor softplus_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar beta, at::Scalar threshold, const at::Tensor & output) const override;
  at::Tensor & softshrink_out(at::Tensor & output, const at::Tensor & self, at::Scalar lambd) const override;
  at::Tensor softshrink(const at::Tensor & self, at::Scalar lambd) const override;
  at::Tensor & softshrink_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::Scalar lambd) const override;
  at::Tensor softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, at::Scalar lambd) const override;
  at::Tensor & adaptive_avg_pool2d_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor adaptive_avg_pool2d(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & adaptive_avg_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self) const override;
  at::Tensor adaptive_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self) const override;
  at::Tensor & adaptive_avg_pool3d_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor adaptive_avg_pool3d(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & adaptive_avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self) const override;
  at::Tensor adaptive_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self) const override;
  std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool2d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntList output_size) const override;
  std::tuple<at::Tensor,at::Tensor> adaptive_max_pool2d(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & adaptive_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) const override;
  at::Tensor adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) const override;
  std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool3d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntList output_size) const override;
  std::tuple<at::Tensor,at::Tensor> adaptive_max_pool3d(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & adaptive_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) const override;
  at::Tensor adaptive_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) const override;
  at::Tensor & avg_pool2d_out(at::Tensor & output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor avg_pool2d(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor & avg_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor & avg_pool3d_out(at::Tensor & output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor avg_pool3d(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor & avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  at::Tensor avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, bool ceil_mode, bool count_include_pad) const override;
  std::tuple<at::Tensor &,at::Tensor &> fractional_max_pool2d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntList kernel_size, at::IntList output_size, const at::Tensor & random_samples) const override;
  std::tuple<at::Tensor,at::Tensor> fractional_max_pool2d(const at::Tensor & self, at::IntList kernel_size, at::IntList output_size, const at::Tensor & random_samples) const override;
  at::Tensor & fractional_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList output_size, const at::Tensor & indices) const override;
  at::Tensor fractional_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList output_size, const at::Tensor & indices) const override;
  std::tuple<at::Tensor &,at::Tensor &> fractional_max_pool3d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntList kernel_size, at::IntList output_size, const at::Tensor & random_samples) const override;
  std::tuple<at::Tensor,at::Tensor> fractional_max_pool3d(const at::Tensor & self, at::IntList kernel_size, at::IntList output_size, const at::Tensor & random_samples) const override;
  at::Tensor & fractional_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList output_size, const at::Tensor & indices) const override;
  at::Tensor fractional_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList output_size, const at::Tensor & indices) const override;
  std::tuple<at::Tensor &,at::Tensor &> max_pool2d_with_indices_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  std::tuple<at::Tensor,at::Tensor> max_pool2d_with_indices(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  at::Tensor & max_pool2d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode, const at::Tensor & indices) const override;
  at::Tensor max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode, const at::Tensor & indices) const override;
  std::tuple<at::Tensor &,at::Tensor &> max_pool3d_with_indices_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  std::tuple<at::Tensor,at::Tensor> max_pool3d_with_indices(const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode) const override;
  at::Tensor & max_pool3d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode, const at::Tensor & indices) const override;
  at::Tensor max_pool3d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, bool ceil_mode, const at::Tensor & indices) const override;
  at::Tensor & max_unpool2d_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size) const override;
  at::Tensor max_unpool2d(const at::Tensor & self, const at::Tensor & indices, at::IntList output_size) const override;
  at::Tensor & max_unpool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size) const override;
  at::Tensor max_unpool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size) const override;
  at::Tensor & max_unpool3d_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size, at::IntList stride, at::IntList padding) const override;
  at::Tensor max_unpool3d(const at::Tensor & self, const at::Tensor & indices, at::IntList output_size, at::IntList stride, at::IntList padding) const override;
  at::Tensor & max_unpool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size, at::IntList stride, at::IntList padding) const override;
  at::Tensor max_unpool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntList output_size, at::IntList stride, at::IntList padding) const override;
  at::Tensor & reflection_pad1d_out(at::Tensor & output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor reflection_pad1d(const at::Tensor & self, at::IntList padding) const override;
  at::Tensor & reflection_pad1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor reflection_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor & reflection_pad2d_out(at::Tensor & output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor reflection_pad2d(const at::Tensor & self, at::IntList padding) const override;
  at::Tensor & reflection_pad2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor reflection_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor & replication_pad1d_out(at::Tensor & output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor replication_pad1d(const at::Tensor & self, at::IntList padding) const override;
  at::Tensor & replication_pad1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor replication_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor & replication_pad2d_out(at::Tensor & output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor replication_pad2d(const at::Tensor & self, at::IntList padding) const override;
  at::Tensor & replication_pad2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor replication_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor & replication_pad3d_out(at::Tensor & output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor replication_pad3d(const at::Tensor & self, at::IntList padding) const override;
  at::Tensor & replication_pad3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor replication_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntList padding) const override;
  at::Tensor & upsample_linear1d_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor upsample_linear1d(const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor & upsample_linear1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor upsample_linear1d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor & upsample_bilinear2d_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor upsample_bilinear2d(const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor & upsample_bilinear2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor upsample_bilinear2d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor & upsample_bicubic2d_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor upsample_bicubic2d(const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor & upsample_bicubic2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor upsample_bicubic2d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor & upsample_trilinear3d_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor upsample_trilinear3d(const at::Tensor & self, at::IntList output_size, bool align_corners) const override;
  at::Tensor & upsample_trilinear3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor upsample_trilinear3d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size, bool align_corners) const override;
  at::Tensor & upsample_nearest1d_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor upsample_nearest1d(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & upsample_nearest1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor upsample_nearest1d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor & upsample_nearest2d_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor upsample_nearest2d(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & upsample_nearest2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor & upsample_nearest3d_out(at::Tensor & output, const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor upsample_nearest3d(const at::Tensor & self, at::IntList output_size) const override;
  at::Tensor & upsample_nearest3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor upsample_nearest3d_backward(const at::Tensor & grad_output, at::IntList output_size, at::IntList input_size) const override;
  at::Tensor & sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) const override;
  at::Tensor sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output) const override;
  at::Tensor & tanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) const override;
  at::Tensor tanh_backward(const at::Tensor & grad_output, const at::Tensor & output) const override;
  at::Tensor & thnn_conv_transpose2d_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  at::Tensor thnn_conv_transpose2d(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv_transpose2d_forward_out(at::Tensor & output, at::Tensor & columns, at::Tensor & ones, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv_transpose2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv_transpose2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv_transpose2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones, std::array<bool,3> output_mask) const override;
  at::Tensor & thnn_conv_transpose3d_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  at::Tensor thnn_conv_transpose3d(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv_transpose3d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv_transpose3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv_transpose3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation, const at::Tensor & finput, const at::Tensor & fgrad_input) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv_transpose3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList output_padding, at::IntList dilation, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) const override;
  at::Tensor & thnn_conv2d_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  at::Tensor thnn_conv2d(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv2d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, const at::Tensor & finput, const at::Tensor & fgrad_input) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) const override;
  at::Tensor & thnn_conv_depthwise2d_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  at::Tensor thnn_conv_depthwise2d(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  at::Tensor & thnn_conv_depthwise2d_forward_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  at::Tensor thnn_conv_depthwise2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &> thnn_conv_depthwise2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor,at::Tensor> thnn_conv_depthwise2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, std::array<bool,2> output_mask) const override;
  at::Tensor & thnn_conv3d_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  at::Tensor thnn_conv3d(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv3d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, const at::Tensor & finput, const at::Tensor & fgrad_input) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, const at::Tensor & finput, const at::Tensor & fgrad_input, std::array<bool,3> output_mask) const override;
  at::Tensor & thnn_conv_dilated2d_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  at::Tensor thnn_conv_dilated2d(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv_dilated2d_forward_out(at::Tensor & output, at::Tensor & columns, at::Tensor & ones, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv_dilated2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv_dilated2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv_dilated2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones, std::array<bool,3> output_mask) const override;
  at::Tensor & thnn_conv_dilated3d_out(at::Tensor & output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  at::Tensor thnn_conv_dilated3d(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv_dilated3d_forward_out(at::Tensor & output, at::Tensor & columns, at::Tensor & ones, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv_dilated3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, const at::Tensor & bias, at::IntList stride, at::IntList padding, at::IntList dilation) const override;
  std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv_dilated3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones) const override;
  std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv_dilated3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntList kernel_size, at::IntList stride, at::IntList padding, at::IntList dilation, const at::Tensor & columns, const at::Tensor & ones, std::array<bool,3> output_mask) const override;
  at::Tensor thnn_col2im(const at::Tensor & self, at::IntList output_size, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor thnn_col2im_backward(const at::Tensor & grad_output, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor thnn_im2col(const at::Tensor & self, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;
  at::Tensor thnn_im2col_backward(const at::Tensor & grad_output, at::IntList input_size, at::IntList kernel_size, at::IntList dilation, at::IntList padding, at::IntList stride) const override;

};

}  // namespace torch_xla

